<?xml version='1.0' encoding='UTF-8'?>
<!--
Copyright lowRISC contributors.
SPDX-License-Identifier: Apache-2.0
Licensed under the Apache License, Version 2.0, see LICENSE for details.

This file generated from HJSON source by "svdgen.py", do not edit.
-->
<device schemaVersion="1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="CMSIS-SVD.xsd">
  <vendor>lowRISC OpenTitan</vendor>
  <vendorID>lowRISC</vendorID>
  <name>earlgrey</name>
  <version>snapshot-20191101-1-518-g9293d546-dirty</version>
  <description># OpenTitan

![OpenTitan logo](doc/opentitan-logo.png)

## About the project

[OpenTitan](https://opentitan.org) is an open source silicon Root of Trust
(RoT) project.  OpenTitan will make the silicon RoT design and implementation
more transparent, trustworthy, and secure for enterprises, platform providers,
and chip manufacturers.  OpenTitan is administered by [lowRISC
CIC](https://www.lowrisc.org) as a collaborative project to produce high
quality, open IP for instantiation as a full-featured product. See the the
[OpenTitan site](https://opentitan.org/) and [OpenTitan
docs](https://docs.opentitan.org) for more information about the project.

## About this repository

This repository contains hardware, software and utilities written as part of the
OpenTitan project. It is structured as monolithic repository, or "monorepo",
where all components live in one repository. It exists to enable collaboration
across partners participating in the OpenTitan project.

## Documentation

The project contains comprehensive documentation of all IPs and tools. You can
either access it [online](https://docs.opentitan.org/) or build it
locally by following the steps below.

1. Ensure that you have the required Python modules installed (to be executed
in the repository root):

```command
$ sudo apt install curl python3 python3-pip
$ pip3 install --user -r python-requirements.txt
```

2. Execute the build script:

```command
$ ./util/build_docs.py --preview
```

This compiles the documentation into `./build/docs` and starts a local
server, which allows you to access the documentation at
[http://127.0.0.1:1313](http://127.0.0.1:1313).

## How to contribute

Have a look at [CONTRIBUTING](./CONTRIBUTING.md) for guidelines on how to
contribute code to this repository.

## Licensing

Unless otherwise noted, everything in this repository is covered by the Apache
License, Version 2.0 (see
[LICENSE](./LICENSE) for full text).</description>
  <width>32</width>
  <size>32</size>
  <addressUnitBits>8</addressUnitBits>
  <cpu>
    <name>RISCV</name>
    <endian>little</endian>
    <revision>0</revision>
    <mpuPresent>true</mpuPresent>
    <fpuPresent>false</fpuPresent>
    <nvicPrioBits>0</nvicPrioBits>
    <vendorSystickConfig>false</vendorSystickConfig>
  </cpu>
  <peripherals>
    <peripheral>
      <name>uart</name>
      <baseAddress>0x40000000</baseAddress>
      <interrupt>
        <name>tx_watermark</name>
        <description>tx_watermark</description>
        <value>0</value>
      </interrupt>
      <interrupt>
        <name>rx_watermark</name>
        <description>rx_watermark</description>
        <value>1</value>
      </interrupt>
      <interrupt>
        <name>tx_empty</name>
        <description>tx_empty</description>
        <value>2</value>
      </interrupt>
      <interrupt>
        <name>rx_overflow</name>
        <description>rx_overflow</description>
        <value>3</value>
      </interrupt>
      <interrupt>
        <name>rx_frame_err</name>
        <description>rx_frame_err</description>
        <value>4</value>
      </interrupt>
      <interrupt>
        <name>rx_break_err</name>
        <description>rx_break_err</description>
        <value>5</value>
      </interrupt>
      <interrupt>
        <name>rx_timeout</name>
        <description>rx_timeout</description>
        <value>6</value>
      </interrupt>
      <interrupt>
        <name>rx_parity_err</name>
        <description>rx_parity_err</description>
        <value>7</value>
      </interrupt>
      <registers>
        <register>
          <name>INTR_STATE</name>
          <description>Interrupt State Register</description>
          <addressOffset>0x0</addressOffset>
          <mask>0xff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xff</resetMask>
          <fields>
            <field>
              <name>tx_watermark</name>
              <description>raised if the transmit FIFO is past the high-water mark.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>rx_watermark</name>
              <description>raised if the receive FIFO is past the high-water mark.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>tx_empty</name>
              <description>raised if the transmit FIFO has emptied.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>rx_overflow</name>
              <description>raised if the receive FIFO has overflowed.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>rx_frame_err</name>
              <description>raised if a framing error has been detected on receive.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>rx_break_err</name>
              <description>raised if break condition has been detected on receive.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>rx_timeout</name>
              <description>raised if RX FIFO has characters remaining in the FIFO without being
retrieved for the programmed time period.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>rx_parity_err</name>
              <description>raised if the receiver has detected a parity error.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_ENABLE</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <mask>0xff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xff</resetMask>
          <fields>
            <field>
              <name>tx_watermark</name>
              <description>Enable interrupt when !!INTR_STATE.tx_watermark is set</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_watermark</name>
              <description>Enable interrupt when !!INTR_STATE.rx_watermark is set</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>Enable interrupt when !!INTR_STATE.tx_empty is set</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_overflow</name>
              <description>Enable interrupt when !!INTR_STATE.rx_overflow is set</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_frame_err</name>
              <description>Enable interrupt when !!INTR_STATE.rx_frame_err is set</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_break_err</name>
              <description>Enable interrupt when !!INTR_STATE.rx_break_err is set</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_timeout</name>
              <description>Enable interrupt when !!INTR_STATE.rx_timeout is set</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_parity_err</name>
              <description>Enable interrupt when !!INTR_STATE.rx_parity_err is set</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_TEST</name>
          <description>Interrupt Test Register</description>
          <addressOffset>0x8</addressOffset>
          <mask>0xff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xff</resetMask>
          <fields>
            <field>
              <name>tx_watermark</name>
              <description>Write 1 to force !!INTR_STATE.tx_watermark to 1</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rx_watermark</name>
              <description>Write 1 to force !!INTR_STATE.rx_watermark to 1</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>tx_empty</name>
              <description>Write 1 to force !!INTR_STATE.tx_empty to 1</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rx_overflow</name>
              <description>Write 1 to force !!INTR_STATE.rx_overflow to 1</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rx_frame_err</name>
              <description>Write 1 to force !!INTR_STATE.rx_frame_err to 1</description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rx_break_err</name>
              <description>Write 1 to force !!INTR_STATE.rx_break_err to 1</description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rx_timeout</name>
              <description>Write 1 to force !!INTR_STATE.rx_timeout to 1</description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rx_parity_err</name>
              <description>Write 1 to force !!INTR_STATE.rx_parity_err to 1</description>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CTRL</name>
          <description>UART control register</description>
          <addressOffset>0xc</addressOffset>
          <mask>0xffff03f7</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffff03f7</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>TX</name>
              <description>TX enable</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RX</name>
              <description>RX enable</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>NF</name>
              <description>RX noise filter enable.
If the noise filter is enabled, RX line goes through the 3-tap
repetition code. It ignores single IP clock period noise.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>SLPBK</name>
              <description>System loopback enable.

If this bit is turned on, any outgoing bits to TX are received through RX.
See Block Diagram. Note that the TX line goes 1 if System loopback is enabled.</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LLPBK</name>
              <description>Line loopback enable.

If this bit is turned on, incoming bits are forwarded to TX for testing purpose.
See Block Diagram. Note that the internal design sees RX value as 1 always if line
loopback is enabled.</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PARITY_EN</name>
              <description>If true, parity is enabled in both RX and TX directions.</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PARITY_ODD</name>
              <description>If PARITY_EN is true, this determines the type, 1 for odd parity, 0 for even.</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RXBLVL</name>
              <description>Trigger level for RX break detection. Sets the number of character
times the line must be low to detect a break.</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>NCO</name>
              <description>BAUD clock rate control.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>STATUS</name>
          <description>UART live status register</description>
          <addressOffset>0x10</addressOffset>
          <mask>0x3f</mask>
          <resetValue>0x3c</resetValue>
          <resetMask>0x3f</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>TXFULL</name>
              <description>TX buffer is full</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RXFULL</name>
              <description>RX buffer is full</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TXEMPTY</name>
              <description>TX FIFO is empty</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>TXIDLE</name>
              <description>TX is idle</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RXIDLE</name>
              <description>RX is idle</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RXEMPTY</name>
              <description>RX FIFO is empty</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>RDATA</name>
          <description>UART read data</description>
          <addressOffset>0x14</addressOffset>
          <size>8</size>
          <mask>0xff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xff</resetMask>
          <access>read-only</access>
        </register>
        <register>
          <name>WDATA</name>
          <description>UART write data</description>
          <addressOffset>0x18</addressOffset>
          <size>8</size>
          <mask>0xff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <access>write-only</access>
        </register>
        <register>
          <name>FIFO_CTRL</name>
          <description>UART FIFO control register</description>
          <addressOffset>0x1c</addressOffset>
          <mask>0x7f</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x7c</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>RXRST</name>
              <description>RX fifo reset. Write 1 to the register resets RX_FIFO. Read returns 0</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>TXRST</name>
              <description>TX fifo reset. Write 1 to the register resets TX_FIFO. Read returns 0</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>RXILVL</name>
              <description>Trigger level for RX interrupts. If the FIFO depth is greater than or equal to
the setting, it raises rx_watermark interrupt.</description>
              <bitRange>[4:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TXILVL</name>
              <description>Trigger level for TX interrupts. If the FIFO depth is greater than or equal to
the setting, it raises tx_watermark interrupt.</description>
              <bitRange>[6:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>FIFO_STATUS</name>
          <description>UART FIFO status register</description>
          <addressOffset>0x20</addressOffset>
          <mask>0x3f003f</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3f003f</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>TXLVL</name>
              <description>Current fill level of TX fifo</description>
              <bitRange>[5:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>RXLVL</name>
              <description>Current fill level of RX fifo</description>
              <bitRange>[21:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>OVRD</name>
          <description>TX pin override control. Gives direct SW control over TX pin state</description>
          <addressOffset>0x24</addressOffset>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>TXEN</name>
              <description>Enable TX pin override control</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>TXVAL</name>
              <description>Write to set the value of the TX pin</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>VAL</name>
          <description>UART oversampled values</description>
          <addressOffset>0x28</addressOffset>
          <mask>0xffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffff</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>RX</name>
              <description>Last 16 oversampled values of RX. Most recent bit is bit 0, oldest 15.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TIMEOUT_CTRL</name>
          <description>UART RX timeout control</description>
          <addressOffset>0x2c</addressOffset>
          <mask>0x80ffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x80ffffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>VAL</name>
              <description>RX timeout value in UART bit times</description>
              <bitRange>[23:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN</name>
              <description>Enable RX timeout feature</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
      <!--end of uart-->
    </peripheral>
    <peripheral>
      <name>gpio</name>
      <baseAddress>0x40010000</baseAddress>
      <interrupt>
        <name>gpio</name>
        <description>gpio</description>
        <value>0</value>
      </interrupt>
      <registers>
        <register>
          <name>INTR_STATE</name>
          <description>Interrupt State Register</description>
          <addressOffset>0x0</addressOffset>
          <mask>0x1</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>gpio</name>
              <description>raised if any of GPIO pin detects configured interrupt mode</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_ENABLE</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <mask>0x1</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>gpio</name>
              <description>Enable interrupt when corresponding bit in !!INTR_STATE.gpio is set</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_TEST</name>
          <description>Interrupt Test Register</description>
          <addressOffset>0x8</addressOffset>
          <mask>0x1</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <fields>
            <field>
              <name>gpio</name>
              <description>Write 1 to force corresponding bit in !!INTR_STATE.gpio to 1</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA_IN</name>
          <description>GPIO Input data read value</description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <access>read-only</access>
        </register>
        <register>
          <name>DIRECT_OUT</name>
          <description>GPIO direct output data write value</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>MASKED_OUT_LOWER</name>
          <description>GPIO write data lower with mask.

Masked write for DATA_OUT[15:0].

Upper 16 bits of this register are used as mask. Writing
lower 16 bits of the register changes DATA_OUT[15:0] value
if mask bits are set.

Read-back of this register returns upper 16 bits as zero
and lower 16 bits as DATA_OUT[15:0].</description>
          <addressOffset>0x14</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>data</name>
              <description>Write data value[15:0].

Value to write into DATA_OUT[i], valid in the presence of mask[i]==1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mask</name>
              <description>Write data mask[15:0].

A value of 1 in mask[i] allows the updating of DATA_OUT[i], 0 &lt;= i &lt;= 15</description>
              <bitRange>[31:16]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MASKED_OUT_UPPER</name>
          <description>GPIO write data upper with mask.

Masked write for DATA_OUT[31:16].

Upper 16 bits of this register are used as mask. Writing
lower 16 bits of the register changes DATA_OUT[31:16] value
if mask bits are set.

Read-back of this register returns upper 16 bits as zero
and lower 16 bits as DATA_OUT[31:16].</description>
          <addressOffset>0x18</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>data</name>
              <description>Write data value[31:16].

   Value to write into DATA_OUT[i], valid in the presence of mask[i]==1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mask</name>
              <description>Write data mask[31:16].

A value of 1 in mask[i] allows the updating of DATA_OUT[i], 16 &lt;= i &lt;= 31</description>
              <bitRange>[31:16]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>DIRECT_OE</name>
          <description>GPIO Output Enable.

Setting direct_oe[i] to 1 enables output mode for GPIO[i]</description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>MASKED_OE_LOWER</name>
          <description>GPIO write Output Enable lower with mask.

Masked write for DATA_OE[15:0], the register that controls
output mode for GPIO pins [15:0].

Upper 16 bits of this register are used as mask. Writing
lower 16 bits of the register changes DATA_OE[15:0] value
if mask bits are set.

Read-back of this register returns upper 16 bits as zero
and lower 16 bits as DATA_OE[15:0].</description>
          <addressOffset>0x20</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>data</name>
              <description>Write OE value[15:0].

Value to write into DATA_OE[i], valid in the presence of mask[i]==1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mask</name>
              <description>Write OE mask[15:0].

A value of 1 in mask[i] allows the updating of DATA_OE[i], 0 &lt;= i &lt;= 15</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MASKED_OE_UPPER</name>
          <description>GPIO write Output Enable upper with mask.

Masked write for DATA_OE[31:16], the register that controls
output mode for GPIO pins [31:16].

Upper 16 bits of this register are used as mask. Writing
lower 16 bits of the register changes DATA_OE[31:16] value
if mask bits are set.

Read-back of this register returns upper 16 bits as zero
and lower 16 bits as DATA_OE[31:16].</description>
          <addressOffset>0x24</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>data</name>
              <description>Write OE value[31:16].

Value to write into DATA_OE[i], valid in the presence of mask[i]==1</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>mask</name>
              <description>Write OE mask[31:16].

A value of 1 in mask[i] allows the updating of DATA_OE[i], 16 &lt;= i &lt;= 31</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_CTRL_EN_RISING</name>
          <description>GPIO interrupt enable for GPIO, rising edge.

If !!INTR_ENABLE[i] is true, a value of 1 on !!INTR_CTRL_EN_RISING[i]
enables rising-edge interrupt detection on GPIO[i].</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>INTR_CTRL_EN_FALLING</name>
          <description>GPIO interrupt enable for GPIO, falling edge.

If !!INTR_ENABLE[i] is true, a value of 1 on !!INTR_CTRL_EN_FALLING[i]
enables falling-edge interrupt detection on GPIO[i].</description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>INTR_CTRL_EN_LVLHIGH</name>
          <description>GPIO interrupt enable for GPIO, level high.

If !!INTR_ENABLE[i] is true, a value of 1 on !!INTR_CTRL_EN_LVLHIGH[i]
enables level high interrupt detection on GPIO[i].</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>INTR_CTRL_EN_LVLLOW</name>
          <description>GPIO interrupt enable for GPIO, level low.

If !!INTR_ENABLE[i] is true, a value of 1 on !!INTR_CTRL_EN_LVLLOW[i]
enables level low interrupt detection on GPIO[i].</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CTRL_EN_INPUT_FILTER</name>
          <description>filter enable for GPIO input bits.

If !!CTRL_EN_INPUT_FILTER[i] is true, a value of input bit [i]
must be stable for 16 cycles before transitioning.</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
      </registers>
      <!--end of gpio-->
    </peripheral>
    <peripheral>
      <name>spi_device</name>
      <baseAddress>0x40020000</baseAddress>
      <interrupt>
        <name>rxf</name>
        <description>rxf</description>
        <value>0</value>
      </interrupt>
      <interrupt>
        <name>rxlvl</name>
        <description>rxlvl</description>
        <value>1</value>
      </interrupt>
      <interrupt>
        <name>txlvl</name>
        <description>txlvl</description>
        <value>2</value>
      </interrupt>
      <interrupt>
        <name>rxerr</name>
        <description>rxerr</description>
        <value>3</value>
      </interrupt>
      <interrupt>
        <name>rxoverflow</name>
        <description>rxoverflow</description>
        <value>4</value>
      </interrupt>
      <interrupt>
        <name>txunderflow</name>
        <description>txunderflow</description>
        <value>5</value>
      </interrupt>
      <registers>
        <register>
          <name>INTR_STATE</name>
          <description>Interrupt State Register</description>
          <addressOffset>0x0</addressOffset>
          <mask>0x3f</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3f</resetMask>
          <fields>
            <field>
              <name>rxf</name>
              <description>RX SRAM FIFO Full</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>rxlvl</name>
              <description>RX SRAM FIFO is above the level</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>txlvl</name>
              <description>TX SRAM FIFO is under the level</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>rxerr</name>
              <description>MOSI in FwMode has error</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>rxoverflow</name>
              <description>RX Async FIFO overflow</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>txunderflow</name>
              <description>TX Async FIFO underflow</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_ENABLE</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <mask>0x3f</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3f</resetMask>
          <fields>
            <field>
              <name>rxf</name>
              <description>Enable interrupt when !!INTR_STATE.rxf is set</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rxlvl</name>
              <description>Enable interrupt when !!INTR_STATE.rxlvl is set</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txlvl</name>
              <description>Enable interrupt when !!INTR_STATE.txlvl is set</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rxerr</name>
              <description>Enable interrupt when !!INTR_STATE.rxerr is set</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rxoverflow</name>
              <description>Enable interrupt when !!INTR_STATE.rxoverflow is set</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txunderflow</name>
              <description>Enable interrupt when !!INTR_STATE.txunderflow is set</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_TEST</name>
          <description>Interrupt Test Register</description>
          <addressOffset>0x8</addressOffset>
          <mask>0x3f</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3f</resetMask>
          <fields>
            <field>
              <name>rxf</name>
              <description>Write 1 to force !!INTR_STATE.rxf to 1</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rxlvl</name>
              <description>Write 1 to force !!INTR_STATE.rxlvl to 1</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>txlvl</name>
              <description>Write 1 to force !!INTR_STATE.txlvl to 1</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rxerr</name>
              <description>Write 1 to force !!INTR_STATE.rxerr to 1</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rxoverflow</name>
              <description>Write 1 to force !!INTR_STATE.rxoverflow to 1</description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>txunderflow</name>
              <description>Write 1 to force !!INTR_STATE.txunderflow to 1</description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CONTROL</name>
          <description>Control register</description>
          <addressOffset>0xc</addressOffset>
          <mask>0x30031</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x30031</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>ABORT</name>
              <description>Abort pending jobs. If TX_FIFO (async) is full,
this command can let TXF Control logic back to Idle state</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MODE</name>
              <description>SPI Device operation mode. Currently only FwMode is supported.</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rst_txfifo</name>
              <description>Reset Async TX_FIFO.

This only resets asynchronous fifo. If firmware wants to reset SRAM
FIFO, it should write 0 into read/write pointers.

_Note_: This value should be controlled only when SPI interface is
in Idle state as this reset signal doesn't have reset synchronizer.</description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rst_rxfifo</name>
              <description>Reset Async RX_FIFO.

This only resets asynchronous fifo. If firmware wants to reset SRAM
FIFO, it should write 0 into read pointer and write pointer.

_Note_: This value should be controlled only when SPI interface is
in Idle state as this reset signal doesn't have reset synchronizer.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CFG</name>
          <description>Configuration Register</description>
          <addressOffset>0x10</addressOffset>
          <mask>0xff0f</mask>
          <resetValue>0x7f00</resetValue>
          <resetMask>0xff0f</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>CPOL</name>
              <description>Clock polarity. 0 for normal SPI, 1 for negative edge latch</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CPHA</name>
              <description>Data phase. 0 for negative edge change, 1 for positive edge change</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>tx_order</name>
              <description>TX bit order on MISO. 0 for MSB to LSB, 1 for LSB to MSB</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rx_order</name>
              <description>RX bit order on MOSI. Module stores bitstream from MSB to LSB if value is 0.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>timer_v</name>
              <description>number of clocks for RXF to wait.

To reduce traffic to SRAM, RXF control module waits given clock cycle
if it doesn't fill SRAM data width even if Async RX FIFO is empty.</description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>FIFO_LEVEL</name>
          <description>RX/ TX FIFO levels.</description>
          <addressOffset>0x14</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x80</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>rxlvl</name>
              <description>RX FIFO level.

If RX SRAM FIFO level exceeds this value, it triggers interrupt.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>txlvl</name>
              <description>TX FIFO level.

If TX SRAM FIFO level drops below this value, it triggers interrupt.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ASYNC_FIFO_LEVEL</name>
          <description>RX/ TX Async FIFO levels between main clk and spi clock</description>
          <addressOffset>0x18</addressOffset>
          <mask>0xff00ff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xff00ff</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>rxlvl</name>
              <description>RX Async FIFO level.

This value shows the number of available entry in RX Async FIFO.</description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txlvl</name>
              <description>TX Async FIFO level.

This value shows the number of available entry in TX Async FIFO.
If the software writes message into SRAM FIFO and update FIFO write pointer
but no clock from the host is given, the data stuck at this async fifo waiting
host toggles SCK. This value represents the number of bytes.</description>
              <bitRange>[23:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>STATUS</name>
          <description>SPI Device status register</description>
          <addressOffset>0x1c</addressOffset>
          <mask>0x3f</mask>
          <resetValue>0x3a</resetValue>
          <resetMask>0x3f</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>rxf_full</name>
              <description>RX FIFO full</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rxf_empty</name>
              <description>RX FIFO empty</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txf_full</name>
              <description>TX FIFO full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>txf_empty</name>
              <description>TX FIFO empty</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>abort_done</name>
              <description>Abort process is completed</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>csb</name>
              <description>Direct input of CSb signal</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>RXF_PTR</name>
          <description>Receiver FIFO (SRAM) pointers</description>
          <addressOffset>0x20</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>RPTR</name>
              <description>Read pointer. bit x is for phase bit. check circular fifo description</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>WPTR</name>
              <description>Write pointer. Bit x is phase bit.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TXF_PTR</name>
          <description>Transmitter FIFO (SRAM) pointers</description>
          <addressOffset>0x24</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>RPTR</name>
              <description>Read pointer. bit x is for phase bit. check circular fifo description</description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>WPTR</name>
              <description>Write pointer. Bit x is phase bit.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>RXF_ADDR</name>
          <description>Receiver FIFO (SRAM) Addresses</description>
          <addressOffset>0x28</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x1fc0000</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>base</name>
              <description>Base offset in bytes in the SRAM. Lower 2 bits are ignored.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>limit</name>
              <description>Limit offset in bytes in the SRAM. Lower 2 bits are ignored.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TXF_ADDR</name>
          <description>Transmitter FIFO (SRAM) Addresses</description>
          <addressOffset>0x2c</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x3fc0200</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>base</name>
              <description>Base offset in bytes in the SRAM. Lower 2 bits are ignored.</description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>limit</name>
              <description>Limit offset in bytes in the SRAM. Lower 2 bits are ignored.</description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>buffer%s</name>
          <description>SPI internal 2kB buffer.

This buffer is shared by RX and TX circular buffer together.</description>
          <addressOffset>0x800</addressOffset>
          <access>read-write</access>
          <dim>512</dim>
          <dimIncrement>0x4</dimIncrement>
        </register>
      </registers>
      <!--end of spi_device-->
    </peripheral>
    <peripheral>
      <name>flash_ctrl</name>
      <baseAddress>0x40030000</baseAddress>
      <interrupt>
        <name>prog_empty</name>
        <description>prog_empty</description>
        <value>0</value>
      </interrupt>
      <interrupt>
        <name>prog_lvl</name>
        <description>prog_lvl</description>
        <value>1</value>
      </interrupt>
      <interrupt>
        <name>rd_full</name>
        <description>rd_full</description>
        <value>2</value>
      </interrupt>
      <interrupt>
        <name>rd_lvl</name>
        <description>rd_lvl</description>
        <value>3</value>
      </interrupt>
      <interrupt>
        <name>op_done</name>
        <description>op_done</description>
        <value>4</value>
      </interrupt>
      <interrupt>
        <name>op_error</name>
        <description>op_error</description>
        <value>5</value>
      </interrupt>
      <registers>
        <register>
          <name>INTR_STATE</name>
          <description>Interrupt State Register</description>
          <addressOffset>0x0</addressOffset>
          <mask>0x3f</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3f</resetMask>
          <fields>
            <field>
              <name>prog_empty</name>
              <description>Program FIFO empty</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>prog_lvl</name>
              <description>Program FIFO drained to level</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>rd_full</name>
              <description>Read FIFO full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>rd_lvl</name>
              <description>Read FIFO filled to level</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>op_done</name>
              <description>Operation complete</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>op_error</name>
              <description>Operation failed with error</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_ENABLE</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <mask>0x3f</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3f</resetMask>
          <fields>
            <field>
              <name>prog_empty</name>
              <description>Enable interrupt when !!INTR_STATE.prog_empty is set</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>prog_lvl</name>
              <description>Enable interrupt when !!INTR_STATE.prog_lvl is set</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_full</name>
              <description>Enable interrupt when !!INTR_STATE.rd_full is set</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>rd_lvl</name>
              <description>Enable interrupt when !!INTR_STATE.rd_lvl is set</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>op_done</name>
              <description>Enable interrupt when !!INTR_STATE.op_done is set</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>op_error</name>
              <description>Enable interrupt when !!INTR_STATE.op_error is set</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_TEST</name>
          <description>Interrupt Test Register</description>
          <addressOffset>0x8</addressOffset>
          <mask>0x3f</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3f</resetMask>
          <fields>
            <field>
              <name>prog_empty</name>
              <description>Write 1 to force !!INTR_STATE.prog_empty to 1</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>prog_lvl</name>
              <description>Write 1 to force !!INTR_STATE.prog_lvl to 1</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rd_full</name>
              <description>Write 1 to force !!INTR_STATE.rd_full to 1</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>rd_lvl</name>
              <description>Write 1 to force !!INTR_STATE.rd_lvl to 1</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>op_done</name>
              <description>Write 1 to force !!INTR_STATE.op_done to 1</description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>op_error</name>
              <description>Write 1 to force !!INTR_STATE.op_error to 1</description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CONTROL</name>
          <description>Control register</description>
          <addressOffset>0xc</addressOffset>
          <mask>0xfff00f1</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xfff00f1</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>START</name>
              <description>Start flash transaction.  This bit shall only be set after the other fields of the
CONTROL register and ADDR have been programmed</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>OP</name>
              <description>Flash operation selection</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ERASE_SEL</name>
              <description>Flash operation selection</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FIFO_RST</name>
              <description>RST FIFOs</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>NUM</name>
              <description>Number of flash words the flash operation should read or program.</description>
              <bitRange>[27:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ADDR</name>
          <description>Address for flash operation</description>
          <addressOffset>0x10</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>START</name>
              <description>Start address of a flash transaction.  Software should supply the full byte address.
The flash controller will then truncate the address as needed.  For read operations,
the flash controller will truncate to the closest, lower word aligned address.  For
example, if 0x13 is supplied, the controller will perform a read at address 0x10.

Program operations behave similarly, the controller does not have read modified write
support.

For page erases, the controller will truncate to the closest lower page aligned
address.  Similarly for bank erases, the controller will truncate to the closest
lower bank aligned address.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>REGION_CFG_REGWEN</name>
          <description>Memory region registers configuration enable.</description>
          <addressOffset>0x14</addressOffset>
          <mask>0xff</mask>
          <resetValue>0xff</resetValue>
          <resetMask>0xff</resetMask>
          <access>read-write</access>
          <modifiedWriteValues>zeroToClear</modifiedWriteValues>
          <fields>
            <field>
              <name>REGION0</name>
              <description>Region register write enable.  Once set to 0, it can longer be configured to 1 for FLASH_CTRL0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>zeroToClear</modifiedWriteValues>
            </field>
            <field>
              <name>REGION1</name>
              <description>for FLASH_CTRL1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>zeroToClear</modifiedWriteValues>
            </field>
            <field>
              <name>REGION2</name>
              <description>for FLASH_CTRL2</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>zeroToClear</modifiedWriteValues>
            </field>
            <field>
              <name>REGION3</name>
              <description>for FLASH_CTRL3</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>zeroToClear</modifiedWriteValues>
            </field>
            <field>
              <name>REGION4</name>
              <description>for FLASH_CTRL4</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>zeroToClear</modifiedWriteValues>
            </field>
            <field>
              <name>REGION5</name>
              <description>for FLASH_CTRL5</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>zeroToClear</modifiedWriteValues>
            </field>
            <field>
              <name>REGION6</name>
              <description>for FLASH_CTRL6</description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>zeroToClear</modifiedWriteValues>
            </field>
            <field>
              <name>REGION7</name>
              <description>for FLASH_CTRL7</description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>zeroToClear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <cluster>
          <name>MP_REGION_CFG</name>
          <description>Memory protection configuration</description>
          <addressOffset>0x18</addressOffset>
          <register>
            <name>MP_REGION_CFG0</name>
            <description>Memory protection configuration</description>
            <addressOffset>0x0</addressOffset>
            <mask>0x1ff1fff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x1ff1fff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>EN0</name>
                <description>Region enabled, following fields apply for FLASH_CTRL0</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>RD_EN0</name>
                <description>Region can be read for FLASH_CTRL0</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PROG_EN0</name>
                <description>Region can be programmed for FLASH_CTRL0</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ERASE_EN0</name>
                <description>Region can be erased for FLASH_CTRL0</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>BASE0</name>
                <description>Region base page. Note the granularity is page, not byte or word for FLASH_CTRL0</description>
                <bitRange>[12:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>SIZE0</name>
                <description>Region size in number of pages for FLASH_CTRL0</description>
                <bitRange>[24:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MP_REGION_CFG1</name>
            <description>Memory protection configuration</description>
            <addressOffset>0x4</addressOffset>
            <mask>0x1ff1fff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x1ff1fff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>EN1</name>
                <description>Region enabled, following fields apply for FLASH_CTRL1</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>RD_EN1</name>
                <description>Region can be read for FLASH_CTRL1</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PROG_EN1</name>
                <description>Region can be programmed for FLASH_CTRL1</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ERASE_EN1</name>
                <description>Region can be erased for FLASH_CTRL1</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>BASE1</name>
                <description>Region base page. Note the granularity is page, not byte or word for FLASH_CTRL1</description>
                <bitRange>[12:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>SIZE1</name>
                <description>Region size in number of pages for FLASH_CTRL1</description>
                <bitRange>[24:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MP_REGION_CFG2</name>
            <description>Memory protection configuration</description>
            <addressOffset>0x8</addressOffset>
            <mask>0x1ff1fff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x1ff1fff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>EN2</name>
                <description>Region enabled, following fields apply for FLASH_CTRL2</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>RD_EN2</name>
                <description>Region can be read for FLASH_CTRL2</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PROG_EN2</name>
                <description>Region can be programmed for FLASH_CTRL2</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ERASE_EN2</name>
                <description>Region can be erased for FLASH_CTRL2</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>BASE2</name>
                <description>Region base page. Note the granularity is page, not byte or word for FLASH_CTRL2</description>
                <bitRange>[12:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>SIZE2</name>
                <description>Region size in number of pages for FLASH_CTRL2</description>
                <bitRange>[24:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MP_REGION_CFG3</name>
            <description>Memory protection configuration</description>
            <addressOffset>0xc</addressOffset>
            <mask>0x1ff1fff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x1ff1fff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>EN3</name>
                <description>Region enabled, following fields apply for FLASH_CTRL3</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>RD_EN3</name>
                <description>Region can be read for FLASH_CTRL3</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PROG_EN3</name>
                <description>Region can be programmed for FLASH_CTRL3</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ERASE_EN3</name>
                <description>Region can be erased for FLASH_CTRL3</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>BASE3</name>
                <description>Region base page. Note the granularity is page, not byte or word for FLASH_CTRL3</description>
                <bitRange>[12:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>SIZE3</name>
                <description>Region size in number of pages for FLASH_CTRL3</description>
                <bitRange>[24:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MP_REGION_CFG4</name>
            <description>Memory protection configuration</description>
            <addressOffset>0x10</addressOffset>
            <mask>0x1ff1fff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x1ff1fff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>EN4</name>
                <description>Region enabled, following fields apply for FLASH_CTRL4</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>RD_EN4</name>
                <description>Region can be read for FLASH_CTRL4</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PROG_EN4</name>
                <description>Region can be programmed for FLASH_CTRL4</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ERASE_EN4</name>
                <description>Region can be erased for FLASH_CTRL4</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>BASE4</name>
                <description>Region base page. Note the granularity is page, not byte or word for FLASH_CTRL4</description>
                <bitRange>[12:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>SIZE4</name>
                <description>Region size in number of pages for FLASH_CTRL4</description>
                <bitRange>[24:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MP_REGION_CFG5</name>
            <description>Memory protection configuration</description>
            <addressOffset>0x14</addressOffset>
            <mask>0x1ff1fff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x1ff1fff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>EN5</name>
                <description>Region enabled, following fields apply for FLASH_CTRL5</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>RD_EN5</name>
                <description>Region can be read for FLASH_CTRL5</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PROG_EN5</name>
                <description>Region can be programmed for FLASH_CTRL5</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ERASE_EN5</name>
                <description>Region can be erased for FLASH_CTRL5</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>BASE5</name>
                <description>Region base page. Note the granularity is page, not byte or word for FLASH_CTRL5</description>
                <bitRange>[12:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>SIZE5</name>
                <description>Region size in number of pages for FLASH_CTRL5</description>
                <bitRange>[24:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MP_REGION_CFG6</name>
            <description>Memory protection configuration</description>
            <addressOffset>0x18</addressOffset>
            <mask>0x1ff1fff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x1ff1fff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>EN6</name>
                <description>Region enabled, following fields apply for FLASH_CTRL6</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>RD_EN6</name>
                <description>Region can be read for FLASH_CTRL6</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PROG_EN6</name>
                <description>Region can be programmed for FLASH_CTRL6</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ERASE_EN6</name>
                <description>Region can be erased for FLASH_CTRL6</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>BASE6</name>
                <description>Region base page. Note the granularity is page, not byte or word for FLASH_CTRL6</description>
                <bitRange>[12:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>SIZE6</name>
                <description>Region size in number of pages for FLASH_CTRL6</description>
                <bitRange>[24:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MP_REGION_CFG7</name>
            <description>Memory protection configuration</description>
            <addressOffset>0x1c</addressOffset>
            <mask>0x1ff1fff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x1ff1fff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>EN7</name>
                <description>Region enabled, following fields apply for FLASH_CTRL7</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>RD_EN7</name>
                <description>Region can be read for FLASH_CTRL7</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>PROG_EN7</name>
                <description>Region can be programmed for FLASH_CTRL7</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>ERASE_EN7</name>
                <description>Region can be erased for FLASH_CTRL7</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>BASE7</name>
                <description>Region base page. Note the granularity is page, not byte or word for FLASH_CTRL7</description>
                <bitRange>[12:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>SIZE7</name>
                <description>Region size in number of pages for FLASH_CTRL7</description>
                <bitRange>[24:16]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <register>
          <name>DEFAULT_REGION</name>
          <description>Default region permissions</description>
          <addressOffset>0x38</addressOffset>
          <mask>0x7</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>RD_EN</name>
              <description>Region can be read</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>PROG_EN</name>
              <description>Region can be programmed</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ERASE_EN</name>
              <description>Region can be erased</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>BANK_CFG_REGWEN</name>
          <description>Bank configuration registers configuration enable.</description>
          <addressOffset>0x3c</addressOffset>
          <mask>0x1</mask>
          <resetValue>0x1</resetValue>
          <resetMask>0x1</resetMask>
          <access>read-write</access>
          <modifiedWriteValues>zeroToClear</modifiedWriteValues>
          <fields>
            <field>
              <name>BANK</name>
              <description>Bank register write enable.  Once set to 0, it can longer be configured to 1</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>zeroToClear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <register>
          <name>MP_BANK_CFG</name>
          <description>Memory protect bank configuration</description>
          <addressOffset>0x40</addressOffset>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>ERASE_EN0</name>
              <description>Bank wide erase enable for FLASH_CTRL0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>ERASE_EN1</name>
              <description>for FLASH_CTRL1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>OP_STATUS</name>
          <description>Flash Operation Status</description>
          <addressOffset>0x44</addressOffset>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>done</name>
              <description>Flash operation done. Set by HW, cleared by SW</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>err</name>
              <description>Flash operation error. Set by HW, cleared by SW</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>STATUS</name>
          <description>Flash Controller Status</description>
          <addressOffset>0x48</addressOffset>
          <mask>0x3ff1f</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3ff1f</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>rd_full</name>
              <description>Flash read fifo full, software must consume data</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>rd_empty</name>
              <description>Flash read fifo empty</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>prog_full</name>
              <description>Flash program fifo full</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>prog_empty</name>
              <description>Flash program fifo empty, software must provide data</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>init_wip</name>
              <description>Flash controller undergoing init</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>error_page</name>
              <description>Flash controller error page.</description>
              <bitRange>[16:8]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>error_bank</name>
              <description>Flash controller error bank.</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>Scratch</name>
          <description>Flash Controller Scratch</description>
          <addressOffset>0x4c</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>data</name>
              <description>Flash ctrl scratch register</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>FIFO_LVL</name>
          <description>Programmable depth where fifos should generate interrupts</description>
          <addressOffset>0x50</addressOffset>
          <mask>0x1f1f</mask>
          <resetValue>0xf0f</resetValue>
          <resetMask>0x1f1f</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>PROG</name>
              <description>When the program fifo drains to this level, trigger an interrupt.
Default value is set such that interrupt does not trigger at reset.</description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>RD</name>
              <description>When the read fifo fills to this level, trigger an interrupt.
Default value is set such that interrupt does not trigger at reset.</description>
              <bitRange>[12:8]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>prog_fifo%s</name>
          <description>Flash program fifo.

The fifo is 16 entries of 4B flash words</description>
          <addressOffset>0x54</addressOffset>
          <access>write-only</access>
          <dim>1</dim>
          <dimIncrement>0x4</dimIncrement>
        </register>
        <register>
          <name>rd_fifo%s</name>
          <description>Flash read fifo.

The fifo is 16 entries of 4B flash words</description>
          <addressOffset>0x58</addressOffset>
          <access>read-only</access>
          <dim>1</dim>
          <dimIncrement>0x4</dimIncrement>
        </register>
      </registers>
      <!--end of flash_ctrl-->
    </peripheral>
    <peripheral>
      <name>rv_timer</name>
      <baseAddress>0x40080000</baseAddress>
      <interrupt>
        <name>timer_expired_0_0</name>
        <description>timer_expired_0_0</description>
        <value>0</value>
      </interrupt>
      <registers>
        <register>
          <name>CTRL</name>
          <description>Control register</description>
          <addressOffset>0x0</addressOffset>
          <mask>0x1</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>active0</name>
              <description>If 1, timer operates for TIMER0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CFG0</name>
          <description>Configuration for Hart 0</description>
          <addressOffset>0x100</addressOffset>
          <mask>0xff0fff</mask>
          <resetValue>0x10000</resetValue>
          <resetMask>0xff0fff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>prescale</name>
              <description>Prescaler to generate tick</description>
              <bitRange>[11:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>step</name>
              <description>Incremental value for each tick</description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TIMER_V_LOWER0</name>
          <description>Timer value Lower</description>
          <addressOffset>0x104</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>v</name>
              <description>Timer value [31:0]</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TIMER_V_UPPER0</name>
          <description>Timer value Upper</description>
          <addressOffset>0x108</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>v</name>
              <description>Timer value [63:32]</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>COMPARE_LOWER0_0</name>
          <description>Timer value Lower</description>
          <addressOffset>0x10c</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0xffffffff</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>v</name>
              <description>Timer compare value [31:0]</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>COMPARE_UPPER0_0</name>
          <description>Timer value Upper</description>
          <addressOffset>0x110</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0xffffffff</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>v</name>
              <description>Timer compare value [63:32]</description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_ENABLE0</name>
          <description>Interrupt Enable</description>
          <addressOffset>0x114</addressOffset>
          <mask>0x1</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>IE0</name>
              <description>Interrupt Enable for timer for TIMER0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_STATE0</name>
          <description>Interrupt Status</description>
          <addressOffset>0x118</addressOffset>
          <mask>0x1</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <access>read-write</access>
          <modifiedWriteValues>oneToClear</modifiedWriteValues>
          <fields>
            <field>
              <name>IS0</name>
              <description>Interrupt status for timer for TIMER0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_TEST0</name>
          <description>Interrupt test register</description>
          <addressOffset>0x11c</addressOffset>
          <mask>0x1</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <access>write-only</access>
          <fields>
            <field>
              <name>T0</name>
              <description>Interrupt test for timer for TIMER0</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
      </registers>
      <!--end of rv_timer-->
    </peripheral>
    <peripheral>
      <name>aes</name>
      <baseAddress>0x40110000</baseAddress>
      <registers>
        <cluster>
          <name>KEY</name>
          <description>Initial Key Registers. Loaded into the internal Full Key register upon
starting encryption/decryption of the next block. Can only be updated
when the AES unit is idle. If the AES unit is non-idle, writes to these
registers are ignored. All key registers must be updated when the
key is changed, regardless of key length (write 0 for unusued bits).
The order in which the registers are updated does not matter.</description>
          <addressOffset>0x0</addressOffset>
          <register>
            <name>KEY0</name>
            <description>Initial Key Registers. Loaded into the internal Full Key register upon
starting encryption/decryption of the next block. Can only be updated
when the AES unit is idle. If the AES unit is non-idle, writes to these
registers are ignored. All key registers must be updated when the
key is changed, regardless of key length (write 0 for unusued bits).
The order in which the registers are updated does not matter.</description>
            <addressOffset>0x0</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key0</name>
                <description>Initial Key for KEY0</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>KEY1</name>
            <description>Initial Key Registers. Loaded into the internal Full Key register upon
starting encryption/decryption of the next block. Can only be updated
when the AES unit is idle. If the AES unit is non-idle, writes to these
registers are ignored. All key registers must be updated when the
key is changed, regardless of key length (write 0 for unusued bits).
The order in which the registers are updated does not matter.</description>
            <addressOffset>0x4</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key1</name>
                <description>Initial Key for KEY1</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>KEY2</name>
            <description>Initial Key Registers. Loaded into the internal Full Key register upon
starting encryption/decryption of the next block. Can only be updated
when the AES unit is idle. If the AES unit is non-idle, writes to these
registers are ignored. All key registers must be updated when the
key is changed, regardless of key length (write 0 for unusued bits).
The order in which the registers are updated does not matter.</description>
            <addressOffset>0x8</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key2</name>
                <description>Initial Key for KEY2</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>KEY3</name>
            <description>Initial Key Registers. Loaded into the internal Full Key register upon
starting encryption/decryption of the next block. Can only be updated
when the AES unit is idle. If the AES unit is non-idle, writes to these
registers are ignored. All key registers must be updated when the
key is changed, regardless of key length (write 0 for unusued bits).
The order in which the registers are updated does not matter.</description>
            <addressOffset>0xc</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key3</name>
                <description>Initial Key for KEY3</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>KEY4</name>
            <description>Initial Key Registers. Loaded into the internal Full Key register upon
starting encryption/decryption of the next block. Can only be updated
when the AES unit is idle. If the AES unit is non-idle, writes to these
registers are ignored. All key registers must be updated when the
key is changed, regardless of key length (write 0 for unusued bits).
The order in which the registers are updated does not matter.</description>
            <addressOffset>0x10</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key4</name>
                <description>Initial Key for KEY4</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>KEY5</name>
            <description>Initial Key Registers. Loaded into the internal Full Key register upon
starting encryption/decryption of the next block. Can only be updated
when the AES unit is idle. If the AES unit is non-idle, writes to these
registers are ignored. All key registers must be updated when the
key is changed, regardless of key length (write 0 for unusued bits).
The order in which the registers are updated does not matter.</description>
            <addressOffset>0x14</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key5</name>
                <description>Initial Key for KEY5</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>KEY6</name>
            <description>Initial Key Registers. Loaded into the internal Full Key register upon
starting encryption/decryption of the next block. Can only be updated
when the AES unit is idle. If the AES unit is non-idle, writes to these
registers are ignored. All key registers must be updated when the
key is changed, regardless of key length (write 0 for unusued bits).
The order in which the registers are updated does not matter.</description>
            <addressOffset>0x18</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key6</name>
                <description>Initial Key for KEY6</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>KEY7</name>
            <description>Initial Key Registers. Loaded into the internal Full Key register upon
starting encryption/decryption of the next block. Can only be updated
when the AES unit is idle. If the AES unit is non-idle, writes to these
registers are ignored. All key registers must be updated when the
key is changed, regardless of key length (write 0 for unusued bits).
The order in which the registers are updated does not matter.</description>
            <addressOffset>0x1c</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key7</name>
                <description>Initial Key for KEY7</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <cluster>
          <name>DATA_IN</name>
          <description>Input Data Registers. Loaded into the internal State register upon
starting encryption/decryption of the next block. After that, the processor
can update the Input Data Register. The order in which the registers are
written does not matter.</description>
          <addressOffset>0x20</addressOffset>
          <register>
            <name>DATA_IN0</name>
            <description>Input Data Registers. Loaded into the internal State register upon
starting encryption/decryption of the next block. After that, the processor
can update the Input Data Register. The order in which the registers are
written does not matter.</description>
            <addressOffset>0x0</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>data_in0</name>
                <description>Input Data for DATA_IN0</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DATA_IN1</name>
            <description>Input Data Registers. Loaded into the internal State register upon
starting encryption/decryption of the next block. After that, the processor
can update the Input Data Register. The order in which the registers are
written does not matter.</description>
            <addressOffset>0x4</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>data_in1</name>
                <description>Input Data for DATA_IN1</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DATA_IN2</name>
            <description>Input Data Registers. Loaded into the internal State register upon
starting encryption/decryption of the next block. After that, the processor
can update the Input Data Register. The order in which the registers are
written does not matter.</description>
            <addressOffset>0x8</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>data_in2</name>
                <description>Input Data for DATA_IN2</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DATA_IN3</name>
            <description>Input Data Registers. Loaded into the internal State register upon
starting encryption/decryption of the next block. After that, the processor
can update the Input Data Register. The order in which the registers are
written does not matter.</description>
            <addressOffset>0xc</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>data_in3</name>
                <description>Input Data for DATA_IN3</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <cluster>
          <name>DATA_OUT</name>
          <description>Output Data Register. Holds the output data produced by the AES unit
during the last encryption/decryption operation. If FORCE_DATA_OVERWRITE=0
(see Control Register), the AES unit is stalled when the previous output
data has not yet been read and is about to be overwritten. The order in
which the registers are read does not matter.</description>
          <addressOffset>0x30</addressOffset>
          <register>
            <name>DATA_OUT0</name>
            <description>Output Data Register. Holds the output data produced by the AES unit
during the last encryption/decryption operation. If FORCE_DATA_OVERWRITE=0
(see Control Register), the AES unit is stalled when the previous output
data has not yet been read and is about to be overwritten. The order in
which the registers are read does not matter.</description>
            <addressOffset>0x0</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-only</access>
            <fields>
              <field>
                <name>data_out0</name>
                <description>Output Data for DATA_OUT0</description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DATA_OUT1</name>
            <description>Output Data Register. Holds the output data produced by the AES unit
during the last encryption/decryption operation. If FORCE_DATA_OVERWRITE=0
(see Control Register), the AES unit is stalled when the previous output
data has not yet been read and is about to be overwritten. The order in
which the registers are read does not matter.</description>
            <addressOffset>0x4</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-only</access>
            <fields>
              <field>
                <name>data_out1</name>
                <description>Output Data for DATA_OUT1</description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DATA_OUT2</name>
            <description>Output Data Register. Holds the output data produced by the AES unit
during the last encryption/decryption operation. If FORCE_DATA_OVERWRITE=0
(see Control Register), the AES unit is stalled when the previous output
data has not yet been read and is about to be overwritten. The order in
which the registers are read does not matter.</description>
            <addressOffset>0x8</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-only</access>
            <fields>
              <field>
                <name>data_out2</name>
                <description>Output Data for DATA_OUT2</description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DATA_OUT3</name>
            <description>Output Data Register. Holds the output data produced by the AES unit
during the last encryption/decryption operation. If FORCE_DATA_OVERWRITE=0
(see Control Register), the AES unit is stalled when the previous output
data has not yet been read and is about to be overwritten. The order in
which the registers are read does not matter.</description>
            <addressOffset>0xc</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-only</access>
            <fields>
              <field>
                <name>data_out3</name>
                <description>Output Data for DATA_OUT3</description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <register>
          <name>CTRL</name>
          <description>Control Register. Can only be updated when the AES unit is idle. If the
AES unit is non-idle, writes to this register are ignored.</description>
          <addressOffset>0x40</addressOffset>
          <mask>0x3f</mask>
          <resetValue>0x2</resetValue>
          <resetMask>0x3f</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>MODE</name>
              <description>Select encryption(0) or decryption(1) operating mode of AES unit.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>KEY_LEN</name>
              <description>3-bit one-hot field to select AES key length: 128 bit (3'b001), 192 bit (3'b010)
or 256 bit (3'b100). Invalid input values, i.e., value with multiple bits set,
value 3'b000, and value 3'b010 in case 192-bit keys are not supported (because
disabled at compile time) are mapped to 3'b001.</description>
              <bitRange>[3:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MANUAL_START_TRIGGER</name>
              <description>Controls whether the AES unit should automatically start to encrypt/decrypt
when it receives new input data (0) or wait for separate trigger signal
before starting (1) (see Trigger Register).</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>FORCE_DATA_OVERWRITE</name>
              <description>Control whether the AES unit is stalled during the last
encryption/decryption cycle if the previous output data has not yet been
read (0) or finishes the operation and overwrites the previous output data (1).</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>TRIGGER</name>
          <description>Trigger Register</description>
          <addressOffset>0x44</addressOffset>
          <mask>0xf</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <access>write-only</access>
          <fields>
            <field>
              <name>START</name>
              <description>Keep AES unit paused (0) or trigger the encryption/decryption of one data block (1).</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>KEY_CLEAR</name>
              <description>Keep current values in Initial Key, internal Full Key and Decryption Key registers (0)
or clear those registers (1).</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>DATA_IN_CLEAR</name>
              <description>Keep current values in input registers (0) or clear those registers (1).</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>DATA_OUT_CLEAR</name>
              <description>Keep current values in output registers (0) or clear those registers (1).</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>STATUS</name>
          <description>Status Register</description>
          <addressOffset>0x48</addressOffset>
          <mask>0xf</mask>
          <resetValue>0x8</resetValue>
          <resetMask>0xf</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>IDLE</name>
              <description>The AES unit is idle (0) or busy (1).</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>STALL</name>
              <description>The AES unit is not stalled (0) or stalled (1) because there is previous
output data that must be read by the processor before the AES unit can
overwrite this data.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>OUTPUT_VALID</name>
              <description>The AES unit has no valid output (0) or has valid output data (1).</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>INPUT_READY</name>
              <description>The AES unit is ready (1) to receive new data input via the DATA_IN registers or
the present values in the DATA_IN registers have not yet been loaded into the
module (0).</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
      </registers>
      <!--end of aes-->
    </peripheral>
    <peripheral>
      <name>hmac</name>
      <baseAddress>0x40120000</baseAddress>
      <interrupt>
        <name>hmac_done</name>
        <description>hmac_done</description>
        <value>0</value>
      </interrupt>
      <interrupt>
        <name>fifo_full</name>
        <description>fifo_full</description>
        <value>1</value>
      </interrupt>
      <interrupt>
        <name>hmac_err</name>
        <description>hmac_err</description>
        <value>2</value>
      </interrupt>
      <registers>
        <register>
          <name>INTR_STATE</name>
          <description>Interrupt State Register</description>
          <addressOffset>0x0</addressOffset>
          <mask>0x7</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <field>
              <name>hmac_done</name>
              <description>HMAC-256 completes a message with key</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>fifo_full</name>
              <description>Message FIFO full condition</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>hmac_err</name>
              <description>HMAC error occurred. ERR_CODE register shows which error occurred</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_ENABLE</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <mask>0x7</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <field>
              <name>hmac_done</name>
              <description>Enable interrupt when !!INTR_STATE.hmac_done is set</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>fifo_full</name>
              <description>Enable interrupt when !!INTR_STATE.fifo_full is set</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>hmac_err</name>
              <description>Enable interrupt when !!INTR_STATE.hmac_err is set</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_TEST</name>
          <description>Interrupt Test Register</description>
          <addressOffset>0x8</addressOffset>
          <mask>0x7</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <fields>
            <field>
              <name>hmac_done</name>
              <description>Write 1 to force !!INTR_STATE.hmac_done to 1</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>fifo_full</name>
              <description>Write 1 to force !!INTR_STATE.fifo_full to 1</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>hmac_err</name>
              <description>Write 1 to force !!INTR_STATE.hmac_err to 1</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CFG</name>
          <description>HMAC Configuration register.

The register is updated when the engine is in Idle.
If the software updates the register while the engine computes the hash,
the updated value is discarded.</description>
          <addressOffset>0xc</addressOffset>
          <mask>0xf</mask>
          <resetValue>0x4</resetValue>
          <resetMask>0xf</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>hmac_en</name>
              <description>HMAC datapath enable.

If this bit is 1, HMAC operates when `hash_start` toggles.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>sha_en</name>
              <description>SHA256 enable. If 0, SHA engine won't initiate compression,
this is used to stop operation of the SHA engine until configuration
has been done. When the SHA engine is disabled the digest is cleared.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>endian_swap</name>
              <description>Convert TL-UL wdata[31:0] to big-endian style {w[7:0], w[15:8], .. }</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>digest_swap</name>
              <description>DIGEST register byte-order. If 1, it swaps each DIGEST registers' byte-order.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CMD</name>
          <description>HMAC command register</description>
          <addressOffset>0x10</addressOffset>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>write-only</access>
          <modifiedWriteValues>oneToClear</modifiedWriteValues>
          <fields>
            <field>
              <name>hash_start</name>
              <description>If writes 1 into this field, SHA256 or HMAC begins its operation.

CPU should configure relative information first, such as message_length,
secret_key.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>hash_process</name>
              <description>If writes 1 into this field, SHA256 or HMAC calculates the digest or signing
based on currently received message.</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <register>
          <name>STATUS</name>
          <description>HMAC Status register</description>
          <addressOffset>0x14</addressOffset>
          <mask>0x1f3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x1f3</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>fifo_empty</name>
              <description>FIFO empty</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fifo_full</name>
              <description>FIFO full. Data written to the FIFO whilst it is full will cause back-pressure on the interconnect</description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
            </field>
            <field>
              <name>fifo_depth</name>
              <description>FIFO entry count.</description>
              <bitRange>[8:4]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ERR_CODE</name>
          <description>HMAC Error Code</description>
          <addressOffset>0x18</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>err_code</name>
              <description>If error interrupt occurs, this register has information of error cause.
Please take a look at `hw/ip/hmac/rtl/hmac_pkg.sv:err_code_e enum type.</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>WIPE_SECRET</name>
          <description>Randomize internal secret registers.

If CPU writes value into the register, the value is used to randomize internal
variables such as secret key, internal state machine, or hash value.</description>
          <addressOffset>0x1c</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <access>write-only</access>
          <fields>
            <field>
              <name>secret</name>
              <description>Secret value</description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <cluster>
          <name>KEY</name>
          <description>HMAC Secret Key

SHA256 assumes secret key is hashed 256bit key.
Order of the secret key is:
key[255:0] = {KEY0, KEY1, KEY2, ... , KEY7};

The registers are allowed to be updated when the engine is in Idle state.
If the engine computes the hash, it discards any attempts to update the secret keys
and report an error.</description>
          <addressOffset>0x20</addressOffset>
          <register>
            <name>KEY0</name>
            <description>HMAC Secret Key

SHA256 assumes secret key is hashed 256bit key.
Order of the secret key is:
key[255:0] = {KEY0, KEY1, KEY2, ... , KEY7};

The registers are allowed to be updated when the engine is in Idle state.
If the engine computes the hash, it discards any attempts to update the secret keys
and report an error.</description>
            <addressOffset>0x0</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key0</name>
                <description>32-bit chunk of 256-bit Secret Key for HMAC0</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>KEY1</name>
            <description>HMAC Secret Key

SHA256 assumes secret key is hashed 256bit key.
Order of the secret key is:
key[255:0] = {KEY0, KEY1, KEY2, ... , KEY7};

The registers are allowed to be updated when the engine is in Idle state.
If the engine computes the hash, it discards any attempts to update the secret keys
and report an error.</description>
            <addressOffset>0x4</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key1</name>
                <description>32-bit chunk of 256-bit Secret Key for HMAC1</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>KEY2</name>
            <description>HMAC Secret Key

SHA256 assumes secret key is hashed 256bit key.
Order of the secret key is:
key[255:0] = {KEY0, KEY1, KEY2, ... , KEY7};

The registers are allowed to be updated when the engine is in Idle state.
If the engine computes the hash, it discards any attempts to update the secret keys
and report an error.</description>
            <addressOffset>0x8</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key2</name>
                <description>32-bit chunk of 256-bit Secret Key for HMAC2</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>KEY3</name>
            <description>HMAC Secret Key

SHA256 assumes secret key is hashed 256bit key.
Order of the secret key is:
key[255:0] = {KEY0, KEY1, KEY2, ... , KEY7};

The registers are allowed to be updated when the engine is in Idle state.
If the engine computes the hash, it discards any attempts to update the secret keys
and report an error.</description>
            <addressOffset>0xc</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key3</name>
                <description>32-bit chunk of 256-bit Secret Key for HMAC3</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>KEY4</name>
            <description>HMAC Secret Key

SHA256 assumes secret key is hashed 256bit key.
Order of the secret key is:
key[255:0] = {KEY0, KEY1, KEY2, ... , KEY7};

The registers are allowed to be updated when the engine is in Idle state.
If the engine computes the hash, it discards any attempts to update the secret keys
and report an error.</description>
            <addressOffset>0x10</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key4</name>
                <description>32-bit chunk of 256-bit Secret Key for HMAC4</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>KEY5</name>
            <description>HMAC Secret Key

SHA256 assumes secret key is hashed 256bit key.
Order of the secret key is:
key[255:0] = {KEY0, KEY1, KEY2, ... , KEY7};

The registers are allowed to be updated when the engine is in Idle state.
If the engine computes the hash, it discards any attempts to update the secret keys
and report an error.</description>
            <addressOffset>0x14</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key5</name>
                <description>32-bit chunk of 256-bit Secret Key for HMAC5</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>KEY6</name>
            <description>HMAC Secret Key

SHA256 assumes secret key is hashed 256bit key.
Order of the secret key is:
key[255:0] = {KEY0, KEY1, KEY2, ... , KEY7};

The registers are allowed to be updated when the engine is in Idle state.
If the engine computes the hash, it discards any attempts to update the secret keys
and report an error.</description>
            <addressOffset>0x18</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key6</name>
                <description>32-bit chunk of 256-bit Secret Key for HMAC6</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>KEY7</name>
            <description>HMAC Secret Key

SHA256 assumes secret key is hashed 256bit key.
Order of the secret key is:
key[255:0] = {KEY0, KEY1, KEY2, ... , KEY7};

The registers are allowed to be updated when the engine is in Idle state.
If the engine computes the hash, it discards any attempts to update the secret keys
and report an error.</description>
            <addressOffset>0x1c</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x0</resetMask>
            <access>write-only</access>
            <fields>
              <field>
                <name>key7</name>
                <description>32-bit chunk of 256-bit Secret Key for HMAC7</description>
                <bitRange>[31:0]</bitRange>
                <access>write-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <cluster>
          <name>DIGEST</name>
          <description>Digest output. If HMAC is disabled, the register shows result of SHA256

 Order of the digest is:
 digest[255:0] = {DIGEST0, DIGEST1, DIGEST2, ... , DIGEST7};</description>
          <addressOffset>0x40</addressOffset>
          <register>
            <name>DIGEST0</name>
            <description>Digest output. If HMAC is disabled, the register shows result of SHA256

 Order of the digest is:
 digest[255:0] = {DIGEST0, DIGEST1, DIGEST2, ... , DIGEST7};</description>
            <addressOffset>0x0</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-only</access>
            <fields>
              <field>
                <name>digest0</name>
                <description>32-bit chunk of 256-bit Digest for HMAC0</description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DIGEST1</name>
            <description>Digest output. If HMAC is disabled, the register shows result of SHA256

 Order of the digest is:
 digest[255:0] = {DIGEST0, DIGEST1, DIGEST2, ... , DIGEST7};</description>
            <addressOffset>0x4</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-only</access>
            <fields>
              <field>
                <name>digest1</name>
                <description>32-bit chunk of 256-bit Digest for HMAC1</description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DIGEST2</name>
            <description>Digest output. If HMAC is disabled, the register shows result of SHA256

 Order of the digest is:
 digest[255:0] = {DIGEST0, DIGEST1, DIGEST2, ... , DIGEST7};</description>
            <addressOffset>0x8</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-only</access>
            <fields>
              <field>
                <name>digest2</name>
                <description>32-bit chunk of 256-bit Digest for HMAC2</description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DIGEST3</name>
            <description>Digest output. If HMAC is disabled, the register shows result of SHA256

 Order of the digest is:
 digest[255:0] = {DIGEST0, DIGEST1, DIGEST2, ... , DIGEST7};</description>
            <addressOffset>0xc</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-only</access>
            <fields>
              <field>
                <name>digest3</name>
                <description>32-bit chunk of 256-bit Digest for HMAC3</description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DIGEST4</name>
            <description>Digest output. If HMAC is disabled, the register shows result of SHA256

 Order of the digest is:
 digest[255:0] = {DIGEST0, DIGEST1, DIGEST2, ... , DIGEST7};</description>
            <addressOffset>0x10</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-only</access>
            <fields>
              <field>
                <name>digest4</name>
                <description>32-bit chunk of 256-bit Digest for HMAC4</description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DIGEST5</name>
            <description>Digest output. If HMAC is disabled, the register shows result of SHA256

 Order of the digest is:
 digest[255:0] = {DIGEST0, DIGEST1, DIGEST2, ... , DIGEST7};</description>
            <addressOffset>0x14</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-only</access>
            <fields>
              <field>
                <name>digest5</name>
                <description>32-bit chunk of 256-bit Digest for HMAC5</description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DIGEST6</name>
            <description>Digest output. If HMAC is disabled, the register shows result of SHA256

 Order of the digest is:
 digest[255:0] = {DIGEST0, DIGEST1, DIGEST2, ... , DIGEST7};</description>
            <addressOffset>0x18</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-only</access>
            <fields>
              <field>
                <name>digest6</name>
                <description>32-bit chunk of 256-bit Digest for HMAC6</description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>DIGEST7</name>
            <description>Digest output. If HMAC is disabled, the register shows result of SHA256

 Order of the digest is:
 digest[255:0] = {DIGEST0, DIGEST1, DIGEST2, ... , DIGEST7};</description>
            <addressOffset>0x1c</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-only</access>
            <fields>
              <field>
                <name>digest7</name>
                <description>32-bit chunk of 256-bit Digest for HMAC7</description>
                <bitRange>[31:0]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <register>
          <name>MSG_LENGTH_LOWER</name>
          <description>Received Message Length calculated by the HMAC in bits [31:0]

Message is byte granularity.
lower 3bits [2:0] are ignored.</description>
          <addressOffset>0x60</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>v</name>
              <description>Message Length [31:0]</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MSG_LENGTH_UPPER</name>
          <description>Received Message Length calculated by the HMAC in bits [63:32]</description>
          <addressOffset>0x64</addressOffset>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>v</name>
              <description>Message Length [63:32]</description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>MSG_FIFO%s</name>
          <description>Message FIFO. Any write to this window will be appended to the FIFO. Only the lower [1:0] bits of the address matter to writes within the window (for correctly dealing with non 32-bit writes)</description>
          <addressOffset>0x800</addressOffset>
          <access>write-only</access>
          <dim>512</dim>
          <dimIncrement>0x4</dimIncrement>
        </register>
      </registers>
      <!--end of hmac-->
    </peripheral>
    <peripheral>
      <name>rv_plic</name>
      <baseAddress>0x40090000</baseAddress>
      <registers>
        <cluster>
          <name>IP</name>
          <description>Interrupt Pending</description>
          <addressOffset>0x0</addressOffset>
          <register>
            <name>IP0</name>
            <description>Interrupt Pending</description>
            <addressOffset>0x0</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-only</access>
            <fields>
              <field>
                <name>P0</name>
                <description>Interrupt Pending of Source for RV_PLIC0</description>
                <bitRange>[0:0]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P1</name>
                <description>for RV_PLIC1</description>
                <bitRange>[1:1]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P2</name>
                <description>for RV_PLIC2</description>
                <bitRange>[2:2]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P3</name>
                <description>for RV_PLIC3</description>
                <bitRange>[3:3]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P4</name>
                <description>for RV_PLIC4</description>
                <bitRange>[4:4]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P5</name>
                <description>for RV_PLIC5</description>
                <bitRange>[5:5]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P6</name>
                <description>for RV_PLIC6</description>
                <bitRange>[6:6]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P7</name>
                <description>for RV_PLIC7</description>
                <bitRange>[7:7]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P8</name>
                <description>for RV_PLIC8</description>
                <bitRange>[8:8]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P9</name>
                <description>for RV_PLIC9</description>
                <bitRange>[9:9]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P10</name>
                <description>for RV_PLIC10</description>
                <bitRange>[10:10]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P11</name>
                <description>for RV_PLIC11</description>
                <bitRange>[11:11]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P12</name>
                <description>for RV_PLIC12</description>
                <bitRange>[12:12]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P13</name>
                <description>for RV_PLIC13</description>
                <bitRange>[13:13]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P14</name>
                <description>for RV_PLIC14</description>
                <bitRange>[14:14]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P15</name>
                <description>for RV_PLIC15</description>
                <bitRange>[15:15]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P16</name>
                <description>for RV_PLIC16</description>
                <bitRange>[16:16]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P17</name>
                <description>for RV_PLIC17</description>
                <bitRange>[17:17]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P18</name>
                <description>for RV_PLIC18</description>
                <bitRange>[18:18]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P19</name>
                <description>for RV_PLIC19</description>
                <bitRange>[19:19]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P20</name>
                <description>for RV_PLIC20</description>
                <bitRange>[20:20]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P21</name>
                <description>for RV_PLIC21</description>
                <bitRange>[21:21]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P22</name>
                <description>for RV_PLIC22</description>
                <bitRange>[22:22]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P23</name>
                <description>for RV_PLIC23</description>
                <bitRange>[23:23]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P24</name>
                <description>for RV_PLIC24</description>
                <bitRange>[24:24]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P25</name>
                <description>for RV_PLIC25</description>
                <bitRange>[25:25]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P26</name>
                <description>for RV_PLIC26</description>
                <bitRange>[26:26]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P27</name>
                <description>for RV_PLIC27</description>
                <bitRange>[27:27]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P28</name>
                <description>for RV_PLIC28</description>
                <bitRange>[28:28]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P29</name>
                <description>for RV_PLIC29</description>
                <bitRange>[29:29]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P30</name>
                <description>for RV_PLIC30</description>
                <bitRange>[30:30]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P31</name>
                <description>for RV_PLIC31</description>
                <bitRange>[31:31]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
          <register>
            <name>IP1</name>
            <description>Interrupt Pending</description>
            <addressOffset>0x4</addressOffset>
            <mask>0x7fffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x7fffffff</resetMask>
            <access>read-only</access>
            <fields>
              <field>
                <name>P32</name>
                <description>Interrupt Pending of Source for RV_PLIC32</description>
                <bitRange>[0:0]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P33</name>
                <description>for RV_PLIC33</description>
                <bitRange>[1:1]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P34</name>
                <description>for RV_PLIC34</description>
                <bitRange>[2:2]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P35</name>
                <description>for RV_PLIC35</description>
                <bitRange>[3:3]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P36</name>
                <description>for RV_PLIC36</description>
                <bitRange>[4:4]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P37</name>
                <description>for RV_PLIC37</description>
                <bitRange>[5:5]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P38</name>
                <description>for RV_PLIC38</description>
                <bitRange>[6:6]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P39</name>
                <description>for RV_PLIC39</description>
                <bitRange>[7:7]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P40</name>
                <description>for RV_PLIC40</description>
                <bitRange>[8:8]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P41</name>
                <description>for RV_PLIC41</description>
                <bitRange>[9:9]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P42</name>
                <description>for RV_PLIC42</description>
                <bitRange>[10:10]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P43</name>
                <description>for RV_PLIC43</description>
                <bitRange>[11:11]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P44</name>
                <description>for RV_PLIC44</description>
                <bitRange>[12:12]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P45</name>
                <description>for RV_PLIC45</description>
                <bitRange>[13:13]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P46</name>
                <description>for RV_PLIC46</description>
                <bitRange>[14:14]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P47</name>
                <description>for RV_PLIC47</description>
                <bitRange>[15:15]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P48</name>
                <description>for RV_PLIC48</description>
                <bitRange>[16:16]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P49</name>
                <description>for RV_PLIC49</description>
                <bitRange>[17:17]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P50</name>
                <description>for RV_PLIC50</description>
                <bitRange>[18:18]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P51</name>
                <description>for RV_PLIC51</description>
                <bitRange>[19:19]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P52</name>
                <description>for RV_PLIC52</description>
                <bitRange>[20:20]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P53</name>
                <description>for RV_PLIC53</description>
                <bitRange>[21:21]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P54</name>
                <description>for RV_PLIC54</description>
                <bitRange>[22:22]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P55</name>
                <description>for RV_PLIC55</description>
                <bitRange>[23:23]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P56</name>
                <description>for RV_PLIC56</description>
                <bitRange>[24:24]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P57</name>
                <description>for RV_PLIC57</description>
                <bitRange>[25:25]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P58</name>
                <description>for RV_PLIC58</description>
                <bitRange>[26:26]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P59</name>
                <description>for RV_PLIC59</description>
                <bitRange>[27:27]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P60</name>
                <description>for RV_PLIC60</description>
                <bitRange>[28:28]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P61</name>
                <description>for RV_PLIC61</description>
                <bitRange>[29:29]</bitRange>
                <access>read-only</access>
              </field>
              <field>
                <name>P62</name>
                <description>for RV_PLIC62</description>
                <bitRange>[30:30]</bitRange>
                <access>read-only</access>
              </field>
            </fields>
          </register>
        </cluster>
        <cluster>
          <name>LE</name>
          <description>Interrupt Source mode. 0: Level, 1: Edge-triggered</description>
          <addressOffset>0x8</addressOffset>
          <register>
            <name>LE0</name>
            <description>Interrupt Source mode. 0: Level, 1: Edge-triggered</description>
            <addressOffset>0x0</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>LE0</name>
                <description>L0E1 for RV_PLIC0</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE1</name>
                <description>for RV_PLIC1</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE2</name>
                <description>for RV_PLIC2</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE3</name>
                <description>for RV_PLIC3</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE4</name>
                <description>for RV_PLIC4</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE5</name>
                <description>for RV_PLIC5</description>
                <bitRange>[5:5]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE6</name>
                <description>for RV_PLIC6</description>
                <bitRange>[6:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE7</name>
                <description>for RV_PLIC7</description>
                <bitRange>[7:7]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE8</name>
                <description>for RV_PLIC8</description>
                <bitRange>[8:8]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE9</name>
                <description>for RV_PLIC9</description>
                <bitRange>[9:9]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE10</name>
                <description>for RV_PLIC10</description>
                <bitRange>[10:10]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE11</name>
                <description>for RV_PLIC11</description>
                <bitRange>[11:11]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE12</name>
                <description>for RV_PLIC12</description>
                <bitRange>[12:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE13</name>
                <description>for RV_PLIC13</description>
                <bitRange>[13:13]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE14</name>
                <description>for RV_PLIC14</description>
                <bitRange>[14:14]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE15</name>
                <description>for RV_PLIC15</description>
                <bitRange>[15:15]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE16</name>
                <description>for RV_PLIC16</description>
                <bitRange>[16:16]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE17</name>
                <description>for RV_PLIC17</description>
                <bitRange>[17:17]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE18</name>
                <description>for RV_PLIC18</description>
                <bitRange>[18:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE19</name>
                <description>for RV_PLIC19</description>
                <bitRange>[19:19]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE20</name>
                <description>for RV_PLIC20</description>
                <bitRange>[20:20]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE21</name>
                <description>for RV_PLIC21</description>
                <bitRange>[21:21]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE22</name>
                <description>for RV_PLIC22</description>
                <bitRange>[22:22]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE23</name>
                <description>for RV_PLIC23</description>
                <bitRange>[23:23]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE24</name>
                <description>for RV_PLIC24</description>
                <bitRange>[24:24]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE25</name>
                <description>for RV_PLIC25</description>
                <bitRange>[25:25]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE26</name>
                <description>for RV_PLIC26</description>
                <bitRange>[26:26]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE27</name>
                <description>for RV_PLIC27</description>
                <bitRange>[27:27]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE28</name>
                <description>for RV_PLIC28</description>
                <bitRange>[28:28]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE29</name>
                <description>for RV_PLIC29</description>
                <bitRange>[29:29]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE30</name>
                <description>for RV_PLIC30</description>
                <bitRange>[30:30]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE31</name>
                <description>for RV_PLIC31</description>
                <bitRange>[31:31]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>LE1</name>
            <description>Interrupt Source mode. 0: Level, 1: Edge-triggered</description>
            <addressOffset>0x4</addressOffset>
            <mask>0x7fffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x7fffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>LE32</name>
                <description>L0E1 for RV_PLIC32</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE33</name>
                <description>for RV_PLIC33</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE34</name>
                <description>for RV_PLIC34</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE35</name>
                <description>for RV_PLIC35</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE36</name>
                <description>for RV_PLIC36</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE37</name>
                <description>for RV_PLIC37</description>
                <bitRange>[5:5]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE38</name>
                <description>for RV_PLIC38</description>
                <bitRange>[6:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE39</name>
                <description>for RV_PLIC39</description>
                <bitRange>[7:7]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE40</name>
                <description>for RV_PLIC40</description>
                <bitRange>[8:8]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE41</name>
                <description>for RV_PLIC41</description>
                <bitRange>[9:9]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE42</name>
                <description>for RV_PLIC42</description>
                <bitRange>[10:10]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE43</name>
                <description>for RV_PLIC43</description>
                <bitRange>[11:11]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE44</name>
                <description>for RV_PLIC44</description>
                <bitRange>[12:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE45</name>
                <description>for RV_PLIC45</description>
                <bitRange>[13:13]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE46</name>
                <description>for RV_PLIC46</description>
                <bitRange>[14:14]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE47</name>
                <description>for RV_PLIC47</description>
                <bitRange>[15:15]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE48</name>
                <description>for RV_PLIC48</description>
                <bitRange>[16:16]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE49</name>
                <description>for RV_PLIC49</description>
                <bitRange>[17:17]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE50</name>
                <description>for RV_PLIC50</description>
                <bitRange>[18:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE51</name>
                <description>for RV_PLIC51</description>
                <bitRange>[19:19]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE52</name>
                <description>for RV_PLIC52</description>
                <bitRange>[20:20]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE53</name>
                <description>for RV_PLIC53</description>
                <bitRange>[21:21]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE54</name>
                <description>for RV_PLIC54</description>
                <bitRange>[22:22]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE55</name>
                <description>for RV_PLIC55</description>
                <bitRange>[23:23]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE56</name>
                <description>for RV_PLIC56</description>
                <bitRange>[24:24]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE57</name>
                <description>for RV_PLIC57</description>
                <bitRange>[25:25]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE58</name>
                <description>for RV_PLIC58</description>
                <bitRange>[26:26]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE59</name>
                <description>for RV_PLIC59</description>
                <bitRange>[27:27]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE60</name>
                <description>for RV_PLIC60</description>
                <bitRange>[28:28]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE61</name>
                <description>for RV_PLIC61</description>
                <bitRange>[29:29]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>LE62</name>
                <description>for RV_PLIC62</description>
                <bitRange>[30:30]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <register>
          <name>PRIO0</name>
          <description>Interrupt Source 0 Priority</description>
          <addressOffset>0x10</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO1</name>
          <description>Interrupt Source 1 Priority</description>
          <addressOffset>0x14</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO2</name>
          <description>Interrupt Source 2 Priority</description>
          <addressOffset>0x18</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO3</name>
          <description>Interrupt Source 3 Priority</description>
          <addressOffset>0x1c</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO4</name>
          <description>Interrupt Source 4 Priority</description>
          <addressOffset>0x20</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO5</name>
          <description>Interrupt Source 5 Priority</description>
          <addressOffset>0x24</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO6</name>
          <description>Interrupt Source 6 Priority</description>
          <addressOffset>0x28</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO7</name>
          <description>Interrupt Source 7 Priority</description>
          <addressOffset>0x2c</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO8</name>
          <description>Interrupt Source 8 Priority</description>
          <addressOffset>0x30</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO9</name>
          <description>Interrupt Source 9 Priority</description>
          <addressOffset>0x34</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO10</name>
          <description>Interrupt Source 10 Priority</description>
          <addressOffset>0x38</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO11</name>
          <description>Interrupt Source 11 Priority</description>
          <addressOffset>0x3c</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO12</name>
          <description>Interrupt Source 12 Priority</description>
          <addressOffset>0x40</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO13</name>
          <description>Interrupt Source 13 Priority</description>
          <addressOffset>0x44</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO14</name>
          <description>Interrupt Source 14 Priority</description>
          <addressOffset>0x48</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO15</name>
          <description>Interrupt Source 15 Priority</description>
          <addressOffset>0x4c</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO16</name>
          <description>Interrupt Source 16 Priority</description>
          <addressOffset>0x50</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO17</name>
          <description>Interrupt Source 17 Priority</description>
          <addressOffset>0x54</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO18</name>
          <description>Interrupt Source 18 Priority</description>
          <addressOffset>0x58</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO19</name>
          <description>Interrupt Source 19 Priority</description>
          <addressOffset>0x5c</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO20</name>
          <description>Interrupt Source 20 Priority</description>
          <addressOffset>0x60</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO21</name>
          <description>Interrupt Source 21 Priority</description>
          <addressOffset>0x64</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO22</name>
          <description>Interrupt Source 22 Priority</description>
          <addressOffset>0x68</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO23</name>
          <description>Interrupt Source 23 Priority</description>
          <addressOffset>0x6c</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO24</name>
          <description>Interrupt Source 24 Priority</description>
          <addressOffset>0x70</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO25</name>
          <description>Interrupt Source 25 Priority</description>
          <addressOffset>0x74</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO26</name>
          <description>Interrupt Source 26 Priority</description>
          <addressOffset>0x78</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO27</name>
          <description>Interrupt Source 27 Priority</description>
          <addressOffset>0x7c</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO28</name>
          <description>Interrupt Source 28 Priority</description>
          <addressOffset>0x80</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO29</name>
          <description>Interrupt Source 29 Priority</description>
          <addressOffset>0x84</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO30</name>
          <description>Interrupt Source 30 Priority</description>
          <addressOffset>0x88</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO31</name>
          <description>Interrupt Source 31 Priority</description>
          <addressOffset>0x8c</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO32</name>
          <description>Interrupt Source 32 Priority</description>
          <addressOffset>0x90</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO33</name>
          <description>Interrupt Source 33 Priority</description>
          <addressOffset>0x94</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO34</name>
          <description>Interrupt Source 34 Priority</description>
          <addressOffset>0x98</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO35</name>
          <description>Interrupt Source 35 Priority</description>
          <addressOffset>0x9c</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO36</name>
          <description>Interrupt Source 36 Priority</description>
          <addressOffset>0xa0</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO37</name>
          <description>Interrupt Source 37 Priority</description>
          <addressOffset>0xa4</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO38</name>
          <description>Interrupt Source 38 Priority</description>
          <addressOffset>0xa8</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO39</name>
          <description>Interrupt Source 39 Priority</description>
          <addressOffset>0xac</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO40</name>
          <description>Interrupt Source 40 Priority</description>
          <addressOffset>0xb0</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO41</name>
          <description>Interrupt Source 41 Priority</description>
          <addressOffset>0xb4</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO42</name>
          <description>Interrupt Source 42 Priority</description>
          <addressOffset>0xb8</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO43</name>
          <description>Interrupt Source 43 Priority</description>
          <addressOffset>0xbc</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO44</name>
          <description>Interrupt Source 44 Priority</description>
          <addressOffset>0xc0</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO45</name>
          <description>Interrupt Source 45 Priority</description>
          <addressOffset>0xc4</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO46</name>
          <description>Interrupt Source 46 Priority</description>
          <addressOffset>0xc8</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO47</name>
          <description>Interrupt Source 47 Priority</description>
          <addressOffset>0xcc</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO48</name>
          <description>Interrupt Source 48 Priority</description>
          <addressOffset>0xd0</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO49</name>
          <description>Interrupt Source 49 Priority</description>
          <addressOffset>0xd4</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO50</name>
          <description>Interrupt Source 50 Priority</description>
          <addressOffset>0xd8</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO51</name>
          <description>Interrupt Source 51 Priority</description>
          <addressOffset>0xdc</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO52</name>
          <description>Interrupt Source 52 Priority</description>
          <addressOffset>0xe0</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO53</name>
          <description>Interrupt Source 53 Priority</description>
          <addressOffset>0xe4</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO54</name>
          <description>Interrupt Source 54 Priority</description>
          <addressOffset>0xe8</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO55</name>
          <description>Interrupt Source 55 Priority</description>
          <addressOffset>0xec</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO56</name>
          <description>Interrupt Source 56 Priority</description>
          <addressOffset>0xf0</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO57</name>
          <description>Interrupt Source 57 Priority</description>
          <addressOffset>0xf4</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO58</name>
          <description>Interrupt Source 58 Priority</description>
          <addressOffset>0xf8</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO59</name>
          <description>Interrupt Source 59 Priority</description>
          <addressOffset>0xfc</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO60</name>
          <description>Interrupt Source 60 Priority</description>
          <addressOffset>0x100</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO61</name>
          <description>Interrupt Source 61 Priority</description>
          <addressOffset>0x104</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>PRIO62</name>
          <description>Interrupt Source 62 Priority</description>
          <addressOffset>0x108</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <cluster>
          <name>IE0</name>
          <description>Interrupt Enable for Target 0</description>
          <addressOffset>0x200</addressOffset>
          <register>
            <name>IE00</name>
            <description>Interrupt Enable for Target 0</description>
            <addressOffset>0x0</addressOffset>
            <mask>0xffffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xffffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>E0</name>
                <description>Interrupt Enable of Source for RV_PLIC0</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E1</name>
                <description>for RV_PLIC1</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E2</name>
                <description>for RV_PLIC2</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E3</name>
                <description>for RV_PLIC3</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E4</name>
                <description>for RV_PLIC4</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E5</name>
                <description>for RV_PLIC5</description>
                <bitRange>[5:5]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E6</name>
                <description>for RV_PLIC6</description>
                <bitRange>[6:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E7</name>
                <description>for RV_PLIC7</description>
                <bitRange>[7:7]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E8</name>
                <description>for RV_PLIC8</description>
                <bitRange>[8:8]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E9</name>
                <description>for RV_PLIC9</description>
                <bitRange>[9:9]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E10</name>
                <description>for RV_PLIC10</description>
                <bitRange>[10:10]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E11</name>
                <description>for RV_PLIC11</description>
                <bitRange>[11:11]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E12</name>
                <description>for RV_PLIC12</description>
                <bitRange>[12:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E13</name>
                <description>for RV_PLIC13</description>
                <bitRange>[13:13]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E14</name>
                <description>for RV_PLIC14</description>
                <bitRange>[14:14]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E15</name>
                <description>for RV_PLIC15</description>
                <bitRange>[15:15]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E16</name>
                <description>for RV_PLIC16</description>
                <bitRange>[16:16]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E17</name>
                <description>for RV_PLIC17</description>
                <bitRange>[17:17]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E18</name>
                <description>for RV_PLIC18</description>
                <bitRange>[18:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E19</name>
                <description>for RV_PLIC19</description>
                <bitRange>[19:19]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E20</name>
                <description>for RV_PLIC20</description>
                <bitRange>[20:20]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E21</name>
                <description>for RV_PLIC21</description>
                <bitRange>[21:21]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E22</name>
                <description>for RV_PLIC22</description>
                <bitRange>[22:22]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E23</name>
                <description>for RV_PLIC23</description>
                <bitRange>[23:23]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E24</name>
                <description>for RV_PLIC24</description>
                <bitRange>[24:24]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E25</name>
                <description>for RV_PLIC25</description>
                <bitRange>[25:25]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E26</name>
                <description>for RV_PLIC26</description>
                <bitRange>[26:26]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E27</name>
                <description>for RV_PLIC27</description>
                <bitRange>[27:27]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E28</name>
                <description>for RV_PLIC28</description>
                <bitRange>[28:28]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E29</name>
                <description>for RV_PLIC29</description>
                <bitRange>[29:29]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E30</name>
                <description>for RV_PLIC30</description>
                <bitRange>[30:30]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E31</name>
                <description>for RV_PLIC31</description>
                <bitRange>[31:31]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>IE01</name>
            <description>Interrupt Enable for Target 0</description>
            <addressOffset>0x4</addressOffset>
            <mask>0x7fffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x7fffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>E32</name>
                <description>Interrupt Enable of Source for RV_PLIC32</description>
                <bitRange>[0:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E33</name>
                <description>for RV_PLIC33</description>
                <bitRange>[1:1]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E34</name>
                <description>for RV_PLIC34</description>
                <bitRange>[2:2]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E35</name>
                <description>for RV_PLIC35</description>
                <bitRange>[3:3]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E36</name>
                <description>for RV_PLIC36</description>
                <bitRange>[4:4]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E37</name>
                <description>for RV_PLIC37</description>
                <bitRange>[5:5]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E38</name>
                <description>for RV_PLIC38</description>
                <bitRange>[6:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E39</name>
                <description>for RV_PLIC39</description>
                <bitRange>[7:7]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E40</name>
                <description>for RV_PLIC40</description>
                <bitRange>[8:8]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E41</name>
                <description>for RV_PLIC41</description>
                <bitRange>[9:9]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E42</name>
                <description>for RV_PLIC42</description>
                <bitRange>[10:10]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E43</name>
                <description>for RV_PLIC43</description>
                <bitRange>[11:11]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E44</name>
                <description>for RV_PLIC44</description>
                <bitRange>[12:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E45</name>
                <description>for RV_PLIC45</description>
                <bitRange>[13:13]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E46</name>
                <description>for RV_PLIC46</description>
                <bitRange>[14:14]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E47</name>
                <description>for RV_PLIC47</description>
                <bitRange>[15:15]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E48</name>
                <description>for RV_PLIC48</description>
                <bitRange>[16:16]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E49</name>
                <description>for RV_PLIC49</description>
                <bitRange>[17:17]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E50</name>
                <description>for RV_PLIC50</description>
                <bitRange>[18:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E51</name>
                <description>for RV_PLIC51</description>
                <bitRange>[19:19]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E52</name>
                <description>for RV_PLIC52</description>
                <bitRange>[20:20]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E53</name>
                <description>for RV_PLIC53</description>
                <bitRange>[21:21]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E54</name>
                <description>for RV_PLIC54</description>
                <bitRange>[22:22]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E55</name>
                <description>for RV_PLIC55</description>
                <bitRange>[23:23]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E56</name>
                <description>for RV_PLIC56</description>
                <bitRange>[24:24]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E57</name>
                <description>for RV_PLIC57</description>
                <bitRange>[25:25]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E58</name>
                <description>for RV_PLIC58</description>
                <bitRange>[26:26]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E59</name>
                <description>for RV_PLIC59</description>
                <bitRange>[27:27]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E60</name>
                <description>for RV_PLIC60</description>
                <bitRange>[28:28]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E61</name>
                <description>for RV_PLIC61</description>
                <bitRange>[29:29]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>E62</name>
                <description>for RV_PLIC62</description>
                <bitRange>[30:30]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <register>
          <name>THRESHOLD0</name>
          <description>Threshold of priority for Target 0</description>
          <addressOffset>0x208</addressOffset>
          <size>2</size>
          <mask>0x3</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CC0</name>
          <description>Claim interrupt by read, complete interrupt by write for Target 0.
Value read/written is interrupt ID. Reading a value of 0 means no pending interrupts.</description>
          <addressOffset>0x20c</addressOffset>
          <size>6</size>
          <mask>0x3f</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x3f</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>MSIP0</name>
          <description>msip for Hart 0.
Write 1 to here asserts software interrupt for Hart msip_o[0], write 0 to clear.</description>
          <addressOffset>0x210</addressOffset>
          <size>1</size>
          <mask>0x1</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x1</resetMask>
          <access>read-write</access>
        </register>
      </registers>
      <!--end of rv_plic-->
    </peripheral>
    <peripheral>
      <name>pinmux</name>
      <baseAddress>0x40070000</baseAddress>
      <registers>
        <register>
          <name>REGEN</name>
          <description>Register write enable for all control registers.</description>
          <addressOffset>0x0</addressOffset>
          <mask>0x1</mask>
          <resetValue>0x1</resetValue>
          <resetMask>0x1</resetMask>
          <access>read-write</access>
          <modifiedWriteValues>zeroToClear</modifiedWriteValues>
          <fields>
            <field>
              <name>wen</name>
              <description>When true, all configuration registers can be modified.
When false, they become read-only. Defaults true, write zero to clear.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>zeroToClear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <cluster>
          <name>PERIPH_INSEL</name>
          <description>Mux select for peripheral inputs.</description>
          <addressOffset>0x4</addressOffset>
          <register>
            <name>PERIPH_INSEL0</name>
            <description>Mux select for peripheral inputs.</description>
            <addressOffset>0x0</addressOffset>
            <mask>0x3fffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x3fffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>IN0</name>
                <description>0: tie constantly to zero, 1: tie constantly to 1.
&gt;=2: MIO pads (i.e., add 2 to the native MIO pad index). for IN0</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN1</name>
                <description>for IN1</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN2</name>
                <description>for IN2</description>
                <bitRange>[17:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN3</name>
                <description>for IN3</description>
                <bitRange>[23:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN4</name>
                <description>for IN4</description>
                <bitRange>[29:24]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>PERIPH_INSEL1</name>
            <description>Mux select for peripheral inputs.</description>
            <addressOffset>0x4</addressOffset>
            <mask>0x3fffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x3fffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>IN5</name>
                <description>0: tie constantly to zero, 1: tie constantly to 1.
&gt;=2: MIO pads (i.e., add 2 to the native MIO pad index). for IN5</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN6</name>
                <description>for IN6</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN7</name>
                <description>for IN7</description>
                <bitRange>[17:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN8</name>
                <description>for IN8</description>
                <bitRange>[23:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN9</name>
                <description>for IN9</description>
                <bitRange>[29:24]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>PERIPH_INSEL2</name>
            <description>Mux select for peripheral inputs.</description>
            <addressOffset>0x8</addressOffset>
            <mask>0x3fffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x3fffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>IN10</name>
                <description>0: tie constantly to zero, 1: tie constantly to 1.
&gt;=2: MIO pads (i.e., add 2 to the native MIO pad index). for IN10</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN11</name>
                <description>for IN11</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN12</name>
                <description>for IN12</description>
                <bitRange>[17:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN13</name>
                <description>for IN13</description>
                <bitRange>[23:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN14</name>
                <description>for IN14</description>
                <bitRange>[29:24]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>PERIPH_INSEL3</name>
            <description>Mux select for peripheral inputs.</description>
            <addressOffset>0xc</addressOffset>
            <mask>0x3fffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x3fffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>IN15</name>
                <description>0: tie constantly to zero, 1: tie constantly to 1.
&gt;=2: MIO pads (i.e., add 2 to the native MIO pad index). for IN15</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN16</name>
                <description>for IN16</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN17</name>
                <description>for IN17</description>
                <bitRange>[17:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN18</name>
                <description>for IN18</description>
                <bitRange>[23:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN19</name>
                <description>for IN19</description>
                <bitRange>[29:24]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>PERIPH_INSEL4</name>
            <description>Mux select for peripheral inputs.</description>
            <addressOffset>0x10</addressOffset>
            <mask>0x3fffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x3fffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>IN20</name>
                <description>0: tie constantly to zero, 1: tie constantly to 1.
&gt;=2: MIO pads (i.e., add 2 to the native MIO pad index). for IN20</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN21</name>
                <description>for IN21</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN22</name>
                <description>for IN22</description>
                <bitRange>[17:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN23</name>
                <description>for IN23</description>
                <bitRange>[23:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN24</name>
                <description>for IN24</description>
                <bitRange>[29:24]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>PERIPH_INSEL5</name>
            <description>Mux select for peripheral inputs.</description>
            <addressOffset>0x14</addressOffset>
            <mask>0x3fffffff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0x3fffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>IN25</name>
                <description>0: tie constantly to zero, 1: tie constantly to 1.
&gt;=2: MIO pads (i.e., add 2 to the native MIO pad index). for IN25</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN26</name>
                <description>for IN26</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN27</name>
                <description>for IN27</description>
                <bitRange>[17:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN28</name>
                <description>for IN28</description>
                <bitRange>[23:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN29</name>
                <description>for IN29</description>
                <bitRange>[29:24]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>PERIPH_INSEL6</name>
            <description>Mux select for peripheral inputs.</description>
            <addressOffset>0x18</addressOffset>
            <mask>0xfff</mask>
            <resetValue>0x0</resetValue>
            <resetMask>0xfff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>IN30</name>
                <description>0: tie constantly to zero, 1: tie constantly to 1.
&gt;=2: MIO pads (i.e., add 2 to the native MIO pad index). for IN30</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>IN31</name>
                <description>for IN31</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
        <cluster>
          <name>MIO_OUTSEL</name>
          <description>Mux select for MIO outputs.</description>
          <addressOffset>0x20</addressOffset>
          <register>
            <name>MIO_OUTSEL0</name>
            <description>Mux select for MIO outputs.</description>
            <addressOffset>0x0</addressOffset>
            <mask>0x3fffffff</mask>
            <resetValue>0x2082082</resetValue>
            <resetMask>0x3fffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>OUT0</name>
                <description>0: tie constantly to zero, 1: tie constantly to 1. 2: high-Z
&gt;=3: peripheral outputs (i.e., add 3 to the native peripheral pad index). for OUT0</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT1</name>
                <description>for OUT1</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT2</name>
                <description>for OUT2</description>
                <bitRange>[17:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT3</name>
                <description>for OUT3</description>
                <bitRange>[23:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT4</name>
                <description>for OUT4</description>
                <bitRange>[29:24]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MIO_OUTSEL1</name>
            <description>Mux select for MIO outputs.</description>
            <addressOffset>0x4</addressOffset>
            <mask>0x3fffffff</mask>
            <resetValue>0x2082082</resetValue>
            <resetMask>0x3fffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>OUT5</name>
                <description>0: tie constantly to zero, 1: tie constantly to 1. 2: high-Z
&gt;=3: peripheral outputs (i.e., add 3 to the native peripheral pad index). for OUT5</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT6</name>
                <description>for OUT6</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT7</name>
                <description>for OUT7</description>
                <bitRange>[17:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT8</name>
                <description>for OUT8</description>
                <bitRange>[23:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT9</name>
                <description>for OUT9</description>
                <bitRange>[29:24]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MIO_OUTSEL2</name>
            <description>Mux select for MIO outputs.</description>
            <addressOffset>0x8</addressOffset>
            <mask>0x3fffffff</mask>
            <resetValue>0x2082082</resetValue>
            <resetMask>0x3fffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>OUT10</name>
                <description>0: tie constantly to zero, 1: tie constantly to 1. 2: high-Z
&gt;=3: peripheral outputs (i.e., add 3 to the native peripheral pad index). for OUT10</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT11</name>
                <description>for OUT11</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT12</name>
                <description>for OUT12</description>
                <bitRange>[17:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT13</name>
                <description>for OUT13</description>
                <bitRange>[23:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT14</name>
                <description>for OUT14</description>
                <bitRange>[29:24]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MIO_OUTSEL3</name>
            <description>Mux select for MIO outputs.</description>
            <addressOffset>0xc</addressOffset>
            <mask>0x3fffffff</mask>
            <resetValue>0x2082082</resetValue>
            <resetMask>0x3fffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>OUT15</name>
                <description>0: tie constantly to zero, 1: tie constantly to 1. 2: high-Z
&gt;=3: peripheral outputs (i.e., add 3 to the native peripheral pad index). for OUT15</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT16</name>
                <description>for OUT16</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT17</name>
                <description>for OUT17</description>
                <bitRange>[17:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT18</name>
                <description>for OUT18</description>
                <bitRange>[23:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT19</name>
                <description>for OUT19</description>
                <bitRange>[29:24]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MIO_OUTSEL4</name>
            <description>Mux select for MIO outputs.</description>
            <addressOffset>0x10</addressOffset>
            <mask>0x3fffffff</mask>
            <resetValue>0x2082082</resetValue>
            <resetMask>0x3fffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>OUT20</name>
                <description>0: tie constantly to zero, 1: tie constantly to 1. 2: high-Z
&gt;=3: peripheral outputs (i.e., add 3 to the native peripheral pad index). for OUT20</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT21</name>
                <description>for OUT21</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT22</name>
                <description>for OUT22</description>
                <bitRange>[17:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT23</name>
                <description>for OUT23</description>
                <bitRange>[23:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT24</name>
                <description>for OUT24</description>
                <bitRange>[29:24]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MIO_OUTSEL5</name>
            <description>Mux select for MIO outputs.</description>
            <addressOffset>0x14</addressOffset>
            <mask>0x3fffffff</mask>
            <resetValue>0x2082082</resetValue>
            <resetMask>0x3fffffff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>OUT25</name>
                <description>0: tie constantly to zero, 1: tie constantly to 1. 2: high-Z
&gt;=3: peripheral outputs (i.e., add 3 to the native peripheral pad index). for OUT25</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT26</name>
                <description>for OUT26</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT27</name>
                <description>for OUT27</description>
                <bitRange>[17:12]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT28</name>
                <description>for OUT28</description>
                <bitRange>[23:18]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT29</name>
                <description>for OUT29</description>
                <bitRange>[29:24]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
          <register>
            <name>MIO_OUTSEL6</name>
            <description>Mux select for MIO outputs.</description>
            <addressOffset>0x18</addressOffset>
            <mask>0xfff</mask>
            <resetValue>0x82</resetValue>
            <resetMask>0xfff</resetMask>
            <access>read-write</access>
            <fields>
              <field>
                <name>OUT30</name>
                <description>0: tie constantly to zero, 1: tie constantly to 1. 2: high-Z
&gt;=3: peripheral outputs (i.e., add 3 to the native peripheral pad index). for OUT30</description>
                <bitRange>[5:0]</bitRange>
                <access>read-write</access>
              </field>
              <field>
                <name>OUT31</name>
                <description>for OUT31</description>
                <bitRange>[11:6]</bitRange>
                <access>read-write</access>
              </field>
            </fields>
          </register>
        </cluster>
      </registers>
      <!--end of pinmux-->
    </peripheral>
    <peripheral>
      <name>alert_handler</name>
      <baseAddress>0x40130000</baseAddress>
      <interrupt>
        <name>classa</name>
        <description>classa</description>
        <value>0</value>
      </interrupt>
      <interrupt>
        <name>classb</name>
        <description>classb</description>
        <value>1</value>
      </interrupt>
      <interrupt>
        <name>classc</name>
        <description>classc</description>
        <value>2</value>
      </interrupt>
      <interrupt>
        <name>classd</name>
        <description>classd</description>
        <value>3</value>
      </interrupt>
      <registers>
        <register>
          <name>INTR_STATE</name>
          <description>Interrupt State Register</description>
          <addressOffset>0x0</addressOffset>
          <mask>0xf</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xf</resetMask>
          <fields>
            <field>
              <name>classa</name>
              <description>Interrupt state bit of Class A. Set by HW in case an alert within this class triggered. Defaults true, write one to clear.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>classb</name>
              <description>Interrupt state bit of Class B. Set by HW in case an alert within this class triggered. Defaults true, write one to clear.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>classc</name>
              <description>Interrupt state bit of Class C. Set by HW in case an alert within this class triggered. Defaults true, write one to clear.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>classd</name>
              <description>Interrupt state bit of Class D. Set by HW in case an alert within this class triggered. Defaults true, write one to clear.</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_ENABLE</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <mask>0xf</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xf</resetMask>
          <fields>
            <field>
              <name>classa</name>
              <description>Enable interrupt when !!INTR_STATE.classa is set</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>classb</name>
              <description>Enable interrupt when !!INTR_STATE.classb is set</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>classc</name>
              <description>Enable interrupt when !!INTR_STATE.classc is set</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>classd</name>
              <description>Enable interrupt when !!INTR_STATE.classd is set</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_TEST</name>
          <description>Interrupt Test Register</description>
          <addressOffset>0x8</addressOffset>
          <mask>0xf</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xf</resetMask>
          <fields>
            <field>
              <name>classa</name>
              <description>Write 1 to force !!INTR_STATE.classa to 1</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>classb</name>
              <description>Write 1 to force !!INTR_STATE.classb to 1</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>classc</name>
              <description>Write 1 to force !!INTR_STATE.classc to 1</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>classd</name>
              <description>Write 1 to force !!INTR_STATE.classd to 1</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>REGEN</name>
          <description>Register write enable for all control registers.</description>
          <addressOffset>0xc</addressOffset>
          <size>1</size>
          <mask>0x1</mask>
          <resetValue>0x1</resetValue>
          <resetMask>0x1</resetMask>
          <access>read-write</access>
          <modifiedWriteValues>oneToClear</modifiedWriteValues>
        </register>
        <register>
          <name>PING_TIMEOUT_CYC</name>
          <description>Ping timeout cycle count.</description>
          <addressOffset>0x10</addressOffset>
          <size>24</size>
          <mask>0xffffff</mask>
          <resetValue>0x20</resetValue>
          <resetMask>0xffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>ALERT_EN</name>
          <description>Enable register for alerts.</description>
          <addressOffset>0x14</addressOffset>
          <mask>0xf</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xf</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>EN_A0</name>
              <description>Alert enable  for alert0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_A1</name>
              <description>for alert1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_A2</name>
              <description>for alert2</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_A3</name>
              <description>for alert3</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ALERT_CLASS</name>
          <description>Class assignment of alerts.</description>
          <addressOffset>0x18</addressOffset>
          <mask>0xff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>CLASS_A0</name>
              <description>Classification  for alert0</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLASS_A1</name>
              <description>for alert1</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLASS_A2</name>
              <description>for alert2</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLASS_A3</name>
              <description>for alert3</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>ALERT_CAUSE</name>
          <description>Alert Cause Register</description>
          <addressOffset>0x1c</addressOffset>
          <mask>0xf</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xf</resetMask>
          <access>read-write</access>
          <modifiedWriteValues>oneToClear</modifiedWriteValues>
          <fields>
            <field>
              <name>A0</name>
              <description>Cause bit  for ALERT0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>A1</name>
              <description>for ALERT1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>A2</name>
              <description>for ALERT2</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>A3</name>
              <description>for ALERT3</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <register>
          <name>LOC_ALERT_EN</name>
          <description>Enable register for the aggregated local alerts "alert
pingfail" (0), "escalation pingfail" (1), "alert integfail" (2) and "escalation integfail" (3).</description>
          <addressOffset>0x20</addressOffset>
          <mask>0xf</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xf</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>EN_LA0</name>
              <description>Alert enable  for local alert0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_LA1</name>
              <description>for local alert1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_LA2</name>
              <description>for local alert2</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_LA3</name>
              <description>for local alert3</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>LOC_ALERT_CLASS</name>
          <description>Class assignment of local alerts. "alert
pingfail" (0), "escalation pingfail" (1), "alert integfail" (2) and "escalation integfail" (3).</description>
          <addressOffset>0x24</addressOffset>
          <mask>0xff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>CLASS_LA0</name>
              <description>Classification  for local alert0</description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLASS_LA1</name>
              <description>for local alert1</description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLASS_LA2</name>
              <description>for local alert2</description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>CLASS_LA3</name>
              <description>for local alert3</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>LOC_ALERT_CAUSE</name>
          <description>Alert Cause Register for Local Alerts. "alert
pingfail" (0), "escalation pingfail" (1), "alert integfail" (2) and "escalation integfail" (3).</description>
          <addressOffset>0x28</addressOffset>
          <mask>0xf</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xf</resetMask>
          <access>read-write</access>
          <modifiedWriteValues>oneToClear</modifiedWriteValues>
          <fields>
            <field>
              <name>LA0</name>
              <description>Cause bit  for LOC_ALERT0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>LA1</name>
              <description>for LOC_ALERT1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>LA2</name>
              <description>for LOC_ALERT2</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>LA3</name>
              <description>for LOC_ALERT3</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CLASSA_CTRL</name>
          <description>Escalation control register for alert Class A. Can not be modified if !!REGEN is false.</description>
          <addressOffset>0x2c</addressOffset>
          <mask>0x3fff</mask>
          <resetValue>0x393c</resetValue>
          <resetMask>0x3fff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>EN</name>
              <description>Enable escalation mechanisms (accumulation and
interrupt timeout) for Class A. Note that interrupts can fire
regardless of whether the escalation mechanisms are enabled for
this class or not.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOCK</name>
              <description>Enable automatic locking of escalation counter for class A.
If true, there is no way to stop the escalation protocol for class A
once it has been triggered.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E0</name>
              <description>Enable escalation signal 0 for Class A</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E1</name>
              <description>Enable escalation signal 1 for Class A</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E2</name>
              <description>Enable escalation signal 2 for Class A</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E3</name>
              <description>Enable escalation signal 3 for Class A</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E0</name>
              <description>Determines in which escalation phase escalation signal 0 shall be asserted.</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E1</name>
              <description>Determines in which escalation phase escalation signal 1 shall be asserted.</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E2</name>
              <description>Determine sin which escalation phase escalation signal 2 shall be asserted.</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E3</name>
              <description>Determines in which escalation phase escalation signal 3 shall be asserted.</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CLASSA_CLREN</name>
          <description>Clear enable for escalation protocol of Class A alerts.</description>
          <addressOffset>0x30</addressOffset>
          <size>1</size>
          <mask>0x1</mask>
          <resetValue>0x1</resetValue>
          <resetMask>0x1</resetMask>
          <access>read-write</access>
          <modifiedWriteValues>oneToClear</modifiedWriteValues>
        </register>
        <register>
          <name>CLASSA_CLR</name>
          <description>Clear for esclation protocol of Class A.</description>
          <addressOffset>0x34</addressOffset>
          <size>1</size>
          <mask>0x1</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <access>write-only</access>
        </register>
        <register>
          <name>CLASSA_ACCUM_CNT</name>
          <description>Current accumulation value for alert Class A. Software can clear this register
with a write to !!CLASSA_CLR register unless !!CLASSA_CLREN is false.</description>
          <addressOffset>0x38</addressOffset>
          <size>16</size>
          <mask>0xffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffff</resetMask>
          <access>read-only</access>
        </register>
        <register>
          <name>CLASSA_ACCUM_THRESH</name>
          <description>Accumulation threshold value for alert Class A.</description>
          <addressOffset>0x3c</addressOffset>
          <size>16</size>
          <mask>0xffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSA_TIMEOUT_CYC</name>
          <description>Interrupt timeout in cycles.</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSA_PHASE0_CYC</name>
          <description>Duration of escalation phase 0 for Class A.</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSA_PHASE1_CYC</name>
          <description>Duration of escalation phase 1 for Class A.</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSA_PHASE2_CYC</name>
          <description>Duration of escalation phase 2 for Class A.</description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSA_PHASE3_CYC</name>
          <description>Duration of escalation phase 3 for Class A.</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSA_ESC_CNT</name>
          <description>Escalation counter in cycles for Class A.</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-only</access>
        </register>
        <register>
          <name>CLASSA_STATE</name>
          <description>Current escalation state of Class A. See also !!CLASSA_ESC_CNT.</description>
          <addressOffset>0x58</addressOffset>
          <size>3</size>
          <mask>0x7</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <access>read-only</access>
        </register>
        <register>
          <name>CLASSB_CTRL</name>
          <description>Escalation control register for alert Class B. Can not be modified if !!REGEN is false.</description>
          <addressOffset>0x5c</addressOffset>
          <mask>0x3fff</mask>
          <resetValue>0x393c</resetValue>
          <resetMask>0x3fff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>EN</name>
              <description>Enable escalation mechanisms (accumulation and
interrupt timeout) for Class B. Note that interrupts can fire
regardless of whether the escalation mechanisms are enabled for
this class or not.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOCK</name>
              <description>Enable automatic locking of escalation counter for class B.
If true, there is no way to stop the escalation protocol for class B
once it has been triggered.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E0</name>
              <description>Enable escalation signal 0 for Class B</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E1</name>
              <description>Enable escalation signal 1 for Class B</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E2</name>
              <description>Enable escalation signal 2 for Class B</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E3</name>
              <description>Enable escalation signal 3 for Class B</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E0</name>
              <description>Determines in which escalation phase escalation signal 0 shall be asserted.</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E1</name>
              <description>Determines in which escalation phase escalation signal 1 shall be asserted.</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E2</name>
              <description>Determine sin which escalation phase escalation signal 2 shall be asserted.</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E3</name>
              <description>Determines in which escalation phase escalation signal 3 shall be asserted.</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CLASSB_CLREN</name>
          <description>Clear enable for escalation protocol of Class B alerts.</description>
          <addressOffset>0x60</addressOffset>
          <size>1</size>
          <mask>0x1</mask>
          <resetValue>0x1</resetValue>
          <resetMask>0x1</resetMask>
          <access>read-write</access>
          <modifiedWriteValues>oneToClear</modifiedWriteValues>
        </register>
        <register>
          <name>CLASSB_CLR</name>
          <description>Clear for esclation protocol of Class B.</description>
          <addressOffset>0x64</addressOffset>
          <size>1</size>
          <mask>0x1</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <access>write-only</access>
        </register>
        <register>
          <name>CLASSB_ACCUM_CNT</name>
          <description>Current accumulation value for alert Class B. Software can clear this register
with a write to !!CLASSB_CLR register unless !!CLASSB_CLREN is false.</description>
          <addressOffset>0x68</addressOffset>
          <size>16</size>
          <mask>0xffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffff</resetMask>
          <access>read-only</access>
        </register>
        <register>
          <name>CLASSB_ACCUM_THRESH</name>
          <description>Accumulation threshold value for alert Class B.</description>
          <addressOffset>0x6c</addressOffset>
          <size>16</size>
          <mask>0xffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSB_TIMEOUT_CYC</name>
          <description>Interrupt timeout in cycles.</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSB_PHASE0_CYC</name>
          <description>Duration of escalation phase 0 for Class B.</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSB_PHASE1_CYC</name>
          <description>Duration of escalation phase 1 for Class B.</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSB_PHASE2_CYC</name>
          <description>Duration of escalation phase 2 for Class B.</description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSB_PHASE3_CYC</name>
          <description>Duration of escalation phase 3 for Class B.</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSB_ESC_CNT</name>
          <description>Escalation counter in cycles for Class B.</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-only</access>
        </register>
        <register>
          <name>CLASSB_STATE</name>
          <description>Current escalation state of Class B. See also !!CLASSB_ESC_CNT.</description>
          <addressOffset>0x88</addressOffset>
          <size>3</size>
          <mask>0x7</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <access>read-only</access>
        </register>
        <register>
          <name>CLASSC_CTRL</name>
          <description>Escalation control register for alert Class C. Can not be modified if !!REGEN is false.</description>
          <addressOffset>0x8c</addressOffset>
          <mask>0x3fff</mask>
          <resetValue>0x393c</resetValue>
          <resetMask>0x3fff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>EN</name>
              <description>Enable escalation mechanisms (accumulation and
interrupt timeout) for Class C. Note that interrupts can fire
regardless of whether the escalation mechanisms are enabled for
this class or not.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOCK</name>
              <description>Enable automatic locking of escalation counter for class C.
If true, there is no way to stop the escalation protocol for class C
once it has been triggered.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E0</name>
              <description>Enable escalation signal 0 for Class C</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E1</name>
              <description>Enable escalation signal 1 for Class C</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E2</name>
              <description>Enable escalation signal 2 for Class C</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E3</name>
              <description>Enable escalation signal 3 for Class C</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E0</name>
              <description>Determines in which escalation phase escalation signal 0 shall be asserted.</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E1</name>
              <description>Determines in which escalation phase escalation signal 1 shall be asserted.</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E2</name>
              <description>Determine sin which escalation phase escalation signal 2 shall be asserted.</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E3</name>
              <description>Determines in which escalation phase escalation signal 3 shall be asserted.</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CLASSC_CLREN</name>
          <description>Clear enable for escalation protocol of Class C alerts.</description>
          <addressOffset>0x90</addressOffset>
          <size>1</size>
          <mask>0x1</mask>
          <resetValue>0x1</resetValue>
          <resetMask>0x1</resetMask>
          <access>read-write</access>
          <modifiedWriteValues>oneToClear</modifiedWriteValues>
        </register>
        <register>
          <name>CLASSC_CLR</name>
          <description>Clear for esclation protocol of Class C.</description>
          <addressOffset>0x94</addressOffset>
          <size>1</size>
          <mask>0x1</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <access>write-only</access>
        </register>
        <register>
          <name>CLASSC_ACCUM_CNT</name>
          <description>Current accumulation value for alert Class C. Software can clear this register
with a write to !!CLASSC_CLR register unless !!CLASSC_CLREN is false.</description>
          <addressOffset>0x98</addressOffset>
          <size>16</size>
          <mask>0xffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffff</resetMask>
          <access>read-only</access>
        </register>
        <register>
          <name>CLASSC_ACCUM_THRESH</name>
          <description>Accumulation threshold value for alert Class C.</description>
          <addressOffset>0x9c</addressOffset>
          <size>16</size>
          <mask>0xffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSC_TIMEOUT_CYC</name>
          <description>Interrupt timeout in cycles.</description>
          <addressOffset>0xa0</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSC_PHASE0_CYC</name>
          <description>Duration of escalation phase 0 for Class C.</description>
          <addressOffset>0xa4</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSC_PHASE1_CYC</name>
          <description>Duration of escalation phase 1 for Class C.</description>
          <addressOffset>0xa8</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSC_PHASE2_CYC</name>
          <description>Duration of escalation phase 2 for Class C.</description>
          <addressOffset>0xac</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSC_PHASE3_CYC</name>
          <description>Duration of escalation phase 3 for Class C.</description>
          <addressOffset>0xb0</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSC_ESC_CNT</name>
          <description>Escalation counter in cycles for Class C.</description>
          <addressOffset>0xb4</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-only</access>
        </register>
        <register>
          <name>CLASSC_STATE</name>
          <description>Current escalation state of Class C. See also !!CLASSC_ESC_CNT.</description>
          <addressOffset>0xb8</addressOffset>
          <size>3</size>
          <mask>0x7</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <access>read-only</access>
        </register>
        <register>
          <name>CLASSD_CTRL</name>
          <description>Escalation control register for alert Class D. Can not be modified if !!REGEN is false.</description>
          <addressOffset>0xbc</addressOffset>
          <mask>0x3fff</mask>
          <resetValue>0x393c</resetValue>
          <resetMask>0x3fff</resetMask>
          <access>read-write</access>
          <fields>
            <field>
              <name>EN</name>
              <description>Enable escalation mechanisms (accumulation and
interrupt timeout) for Class D. Note that interrupts can fire
regardless of whether the escalation mechanisms are enabled for
this class or not.</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>LOCK</name>
              <description>Enable automatic locking of escalation counter for class D.
If true, there is no way to stop the escalation protocol for class D
once it has been triggered.</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E0</name>
              <description>Enable escalation signal 0 for Class D</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E1</name>
              <description>Enable escalation signal 1 for Class D</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E2</name>
              <description>Enable escalation signal 2 for Class D</description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>EN_E3</name>
              <description>Enable escalation signal 3 for Class D</description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E0</name>
              <description>Determines in which escalation phase escalation signal 0 shall be asserted.</description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E1</name>
              <description>Determines in which escalation phase escalation signal 1 shall be asserted.</description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E2</name>
              <description>Determine sin which escalation phase escalation signal 2 shall be asserted.</description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>MAP_E3</name>
              <description>Determines in which escalation phase escalation signal 3 shall be asserted.</description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CLASSD_CLREN</name>
          <description>Clear enable for escalation protocol of Class D alerts.</description>
          <addressOffset>0xc0</addressOffset>
          <size>1</size>
          <mask>0x1</mask>
          <resetValue>0x1</resetValue>
          <resetMask>0x1</resetMask>
          <access>read-write</access>
          <modifiedWriteValues>oneToClear</modifiedWriteValues>
        </register>
        <register>
          <name>CLASSD_CLR</name>
          <description>Clear for esclation protocol of Class D.</description>
          <addressOffset>0xc4</addressOffset>
          <size>1</size>
          <mask>0x1</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x0</resetMask>
          <access>write-only</access>
        </register>
        <register>
          <name>CLASSD_ACCUM_CNT</name>
          <description>Current accumulation value for alert Class D. Software can clear this register
with a write to !!CLASSD_CLR register unless !!CLASSD_CLREN is false.</description>
          <addressOffset>0xc8</addressOffset>
          <size>16</size>
          <mask>0xffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffff</resetMask>
          <access>read-only</access>
        </register>
        <register>
          <name>CLASSD_ACCUM_THRESH</name>
          <description>Accumulation threshold value for alert Class D.</description>
          <addressOffset>0xcc</addressOffset>
          <size>16</size>
          <mask>0xffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSD_TIMEOUT_CYC</name>
          <description>Interrupt timeout in cycles.</description>
          <addressOffset>0xd0</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSD_PHASE0_CYC</name>
          <description>Duration of escalation phase 0 for Class D.</description>
          <addressOffset>0xd4</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSD_PHASE1_CYC</name>
          <description>Duration of escalation phase 1 for Class D.</description>
          <addressOffset>0xd8</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSD_PHASE2_CYC</name>
          <description>Duration of escalation phase 2 for Class D.</description>
          <addressOffset>0xdc</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSD_PHASE3_CYC</name>
          <description>Duration of escalation phase 3 for Class D.</description>
          <addressOffset>0xe0</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-write</access>
        </register>
        <register>
          <name>CLASSD_ESC_CNT</name>
          <description>Escalation counter in cycles for Class D.</description>
          <addressOffset>0xe4</addressOffset>
          <size>32</size>
          <mask>0xffffffff</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-only</access>
        </register>
        <register>
          <name>CLASSD_STATE</name>
          <description>Current escalation state of Class D. See also !!CLASSD_ESC_CNT.</description>
          <addressOffset>0xe8</addressOffset>
          <size>3</size>
          <mask>0x7</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0x7</resetMask>
          <access>read-only</access>
        </register>
      </registers>
      <!--end of alert_handler-->
    </peripheral>
    <peripheral>
      <name>nmi_gen</name>
      <baseAddress>0x40140000</baseAddress>
      <interrupt>
        <name>esc0</name>
        <description>esc0</description>
        <value>0</value>
      </interrupt>
      <interrupt>
        <name>esc1</name>
        <description>esc1</description>
        <value>1</value>
      </interrupt>
      <interrupt>
        <name>esc2</name>
        <description>esc2</description>
        <value>2</value>
      </interrupt>
      <interrupt>
        <name>esc3</name>
        <description>esc3</description>
        <value>3</value>
      </interrupt>
      <registers>
        <register>
          <name>INTR_STATE</name>
          <description>Interrupt State Register</description>
          <addressOffset>0x0</addressOffset>
          <mask>0xf</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xf</resetMask>
          <fields>
            <field>
              <name>esc0</name>
              <description>Escalation interrupt 0</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>esc1</name>
              <description>Escalation interrupt 1</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>esc2</name>
              <description>Escalation interrupt 2</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
            <field>
              <name>esc3</name>
              <description>Escalation interrupt 3</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <modifiedWriteValues>oneToClear</modifiedWriteValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_ENABLE</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x4</addressOffset>
          <mask>0xf</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xf</resetMask>
          <fields>
            <field>
              <name>esc0</name>
              <description>Enable interrupt when !!INTR_STATE.esc0 is set</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>esc1</name>
              <description>Enable interrupt when !!INTR_STATE.esc1 is set</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>esc2</name>
              <description>Enable interrupt when !!INTR_STATE.esc2 is set</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>
            <field>
              <name>esc3</name>
              <description>Enable interrupt when !!INTR_STATE.esc3 is set</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>INTR_TEST</name>
          <description>Interrupt Test Register</description>
          <addressOffset>0x8</addressOffset>
          <mask>0xf</mask>
          <resetValue>0x0</resetValue>
          <resetMask>0xf</resetMask>
          <fields>
            <field>
              <name>esc0</name>
              <description>Write 1 to force !!INTR_STATE.esc0 to 1</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>esc1</name>
              <description>Write 1 to force !!INTR_STATE.esc1 to 1</description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>esc2</name>
              <description>Write 1 to force !!INTR_STATE.esc2 to 1</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
            <field>
              <name>esc3</name>
              <description>Write 1 to force !!INTR_STATE.esc3 to 1</description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>
      </registers>
      <!--end of nmi_gen-->
    </peripheral>
  </peripherals>
</device>
